{"version":3,"file":"static/js/204.8781bee9.chunk.js","mappings":"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","sources":["components/InputSearch/InputSearch.tsx","components/TableBox/TableBox.tsx","api/dataSearchApi.ts","components/CodeEdit.tsx","pages/DataSearch/TaskList.tsx","pages/DataSearch/ConfigFormData.tsx","pages/DataSearch/DataSearch.tsx"],"sourcesContent":["import { SearchOutlined } from '@ant-design/icons';\r\nimport { Input } from 'antd';\r\nimport React, { useState, ChangeEvent, useEffect } from 'react';\r\nimport './InputSearch.less';\r\n\r\ninterface IProps {\r\n    labelName?: string,\r\n    width?: string,\r\n    placeholder?: string,\r\n    maxLength?: number,\r\n    maxHeight?: number,\r\n    // 是否开启前端搜索匹配\r\n    isOpenSearchMatch?: boolean,\r\n    loading?: boolean | JSX.Element,\r\n    // 配置提示列表\r\n    options?: string[],\r\n    // 当配置value时，即为可控组件\r\n    value?: string,\r\n    disabled?: boolean\r\n    // 按回车时回调\r\n    onSearch?: (value: string) => void,\r\n    // 输入字符、按下回车时回调\r\n    onChange?: (value: string) => void,\r\n    // 点击option中的item\r\n    onClick?: (value: string) => void,\r\n    // 滚动条到底时触发\r\n    onScrollButtom?: () => void\r\n}\r\n\r\nexport default function InputSearch(props: IProps): JSX.Element {\r\n    const id = Math.random().toString(36).substring(2);\r\n    let inputRef: any;\r\n\r\n    const [dataCache, setDataCache] = useState<string[]>(props.options || []);\r\n    const [value, setValue] = useState(props.value || '');\r\n\r\n    useEffect(() => {\r\n        const dataFilter = props.isOpenSearchMatch ? (props.options || []).filter(item => {\r\n            return item.indexOf(value) !== -1;\r\n        }) : (props.options || []);\r\n        setDataCache(dataFilter);\r\n    }, [props.options]);\r\n\r\n    useEffect(() => {\r\n        setValue(props.value || '');\r\n        // props.onChange && props.onChange(props.value);\r\n    }, [props.value]);\r\n\r\n    const handleChange = (value: string): void => {\r\n        setValue(value);\r\n        props.onChange && props.onChange(value);\r\n    };\r\n\r\n    const handleClick = (value: string): void => {\r\n        handleChange(value);\r\n        props.onClick && props.onClick(value);\r\n    };\r\n\r\n    const handleEnterKey = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n        // 回车\r\n        if (e.nativeEvent.keyCode === 13) {\r\n            inputRef.blur && inputRef.blur();\r\n            props.onSearch && props.onSearch(e.currentTarget.value);\r\n        }\r\n    };\r\n\r\n    const highlightKeyWord = (item: string): JSX.Element => {\r\n        const keyWord = value;\r\n        const index = item.indexOf(value);\r\n        if (index === -1) {\r\n            return <span>{item}</span>;\r\n        }\r\n        const preStr = item.substring(0, index);\r\n        const nextStr = item.substring(index + value.length);\r\n        return <span>{preStr}<span className=\"highlight\">{keyWord}</span>{nextStr}</span>;\r\n    };\r\n\r\n    const debounce = (fun: any, time = 500): any => {\r\n        let timer: ReturnType<typeof setTimeout>;\r\n        return function (...args: any): void {\r\n            clearTimeout(timer);\r\n            timer = setTimeout(() => {\r\n                fun && fun.apply(null, [...args]);\r\n            }, time);\r\n        };\r\n    };\r\n\r\n    const debounceScroll = debounce(props.onScrollButtom);\r\n\r\n    const handleScroll = (e: React.UIEvent<HTMLElement>): void => {\r\n        e.stopPropagation();\r\n        // console.log({\r\n        //     event: e,\r\n        //     target: e.target, // Note 1* scrollTop is undefined on e.target\r\n        //     currentTarget: e.currentTarget,\r\n        //     scrollTop: e.currentTarget.scrollTop,\r\n        //     scrollHeight: e.currentTarget.scrollHeight,\r\n        //     clientHeight: e.currentTarget.clientHeight\r\n        // });\r\n        const { currentTarget } = e;\r\n        const { scrollTop, clientHeight, scrollHeight } = currentTarget;\r\n        const difference = scrollHeight - clientHeight - scrollTop;\r\n        if (difference < 20) {\r\n            props.onScrollButtom && debounceScroll();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"select-down-modern\">\r\n            {\r\n                props.labelName ? <label htmlFor={id} className=\"pb4 mb0 fs12 d-b\">{props.labelName}</label> : null\r\n            }\r\n            <div className=\"p-r d-f ac\" style={{ width: props.width || 100 + '%' }}>\r\n                <Input\r\n                    style={{ width: '100%' }}\r\n                    disabled={props.disabled}\r\n                    id={id}\r\n                    placeholder={props.placeholder || ''}\r\n                    maxLength={props.maxLength || 200}\r\n                    onChange={(e: ChangeEvent<HTMLInputElement>): void => handleChange(e.target.value)}\r\n                    onKeyPress={handleEnterKey}\r\n                    value={value}\r\n                    ref={element => inputRef = element}\r\n                />\r\n                <SearchOutlined className=\"p-a r0 mr8\" />\r\n            </div>\r\n\r\n            {\r\n                // 输入提示\r\n                dataCache.length ? <ul className=\"select-option shadow\" onScroll={handleScroll} style={{ 'maxHeight': `${props.maxHeight}px` }}>\r\n                    {\r\n                        props.loading ? <div className=\"p-s z9 ta-r\" style={{ right: `${0}px`, top: `${0}px` }}>\r\n                            <div className=\"d-il p-a\" style={{ right: `${8}px`, top: `${0}px` }}></div>\r\n                        </div> : null\r\n                    }\r\n                    {\r\n                        dataCache.map((item, index) => {\r\n                            return <li className=\"ellip1\" onMouseDown={(): void => handleClick(item)} key={index}>{highlightKeyWord(item)}</li>;\r\n                        })\r\n                    }\r\n                </ul> : null\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { ReactNode, useEffect, useState } from 'react';\r\nimport { Row, Col, Space, Table, ConfigProvider, Button, Modal, Tabs, message, Checkbox } from 'antd';\r\nimport './TableBox.less';\r\nimport { TablePaginationConfig } from 'antd/lib/table/Table';\r\nimport emptyImg from '../../images/emptyBg.png';\r\nimport { GetRowKey, SorterResult, TableRowSelection } from 'antd/lib/table/interface';\r\n// import ExportJsonExcel from 'js-export-excel';\r\nimport { Resizable } from 'react-resizable';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst CopyToClipboard = require('react-copy-to-clipboard');\r\n\r\ninterface IProps {\r\n\tsize?: 'large' | 'middle' | 'small'\r\n\ttableKey?: string\r\n\trowKey?: string | GetRowKey<any>;\r\n\ttitleNode?: string | ReactNode;\r\n\tbuttonNode?: ReactNode;\r\n\tdataSource: any;\r\n\tcolumns: any;\r\n\tpagination?: false | TablePaginationConfig;\r\n\tscroll?:\r\n\t| ({\r\n\t\tx?: string | number | true | undefined;\r\n\t\ty?: string | number | undefined;\r\n\t} & {\r\n\t\tscrollToFirstRowOnChange?: boolean | undefined;\r\n\t})\r\n\t| undefined;\r\n\tloading?: boolean;\r\n\trowSelection?: TableRowSelection<any>;\r\n\tcancelExportData?: boolean;\r\n\tonChange?: (\r\n\t\tpagination: TablePaginationConfig,\r\n\t\tfilters: Record<string, (string | number | boolean)[] | null>,\r\n\t\tsorter: SorterResult<any> | SorterResult<any>[],\r\n\t) => void;\r\n}\r\n\r\nconst ResizableTitle = ({ onResize, width, ...restProps }: any) => {\r\n\tif (!width) {\r\n\t\treturn <th {...restProps} />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Resizable\r\n\t\t\twidth={width}\r\n\t\t\theight={0}\r\n\t\t\thandle={\r\n\t\t\t\t<span\r\n\t\t\t\t\tclassName=\"react-resizable-handle\"\r\n\t\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t}\r\n\t\t\tonResize={onResize}\r\n\t\t\tdraggableOpts={{ enableUserSelectHack: false }}\r\n\t\t>\r\n\t\t\t<th {...restProps} style={{ ...restProps?.style, userSelect: 'none' }} />\r\n\t\t</Resizable>\r\n\t);\r\n};\r\n\r\nconst TableBox = (props: IProps) => {\r\n\tconst [exportDataVisible, setExportDataVisible] = useState(false);\r\n\tconst [dataFormat, setDataFormat] = useState<{ header: any[]; data: any[] }>({\r\n\t\theader: [],\r\n\t\tdata: [],\r\n\t});\r\n\tconst [filterValue, setFilterValue] = useState<any[]>([]);\r\n\r\n\t// 可伸缩列设置\r\n\tconst [cols, setCols] = useState(props.columns);\r\n\tconst handleResize = (index: any) => {\r\n\t\treturn (_: any, { size }: any) => {\r\n\t\t\tif (size.width < 100) return\r\n\t\t\tconst temp = [...cols];\r\n\t\t\ttemp[index] = { ...temp[index], width: size.width };\r\n\t\t\tconst tableWidth = temp.reduce((pre: any, next: any) => pre + next.width || 100, 0) + 200\r\n\t\t\tlocalStorage.setItem(props.tableKey || '', JSON.stringify(temp))\r\n\t\t\t// console.log(currentTableScroll, temp);\r\n\t\t\tsetCurrentTableScroll({ ...currentTableScroll, x: tableWidth })\r\n\t\t\tsetCols(temp);\r\n\t\t};\r\n\t};\r\n\tconst customColumns = cols.map((col: any, index: any) => {\r\n\t\treturn {\r\n\t\t\t...col,\r\n\t\t\twidth: col.width || 200,\r\n\t\t\tonHeaderCell: (column: any) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\twidth: column.width,\r\n\t\t\t\t\tonResize: handleResize(index),\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t};\r\n\t});\r\n\tconst [currentTableScroll, setCurrentTableScroll] = useState(props.scroll)\r\n\tconst { t, i18n } = useTranslation();\r\n\r\n\tuseEffect(() => {\r\n\t\tsetCols(props.columns);\r\n\t}, [props.columns]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetCurrentTableScroll(props.scroll);\r\n\t}, [props.scroll]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.dataSource) {\r\n\t\t\tconst columns = props.columns.filter((item: any) => ~filterValue.indexOf(item.dataIndex));\r\n\t\t\thanddleFilterHeader(columns, props.dataSource);\r\n\t\t}\r\n\t}, [props.dataSource, props.columns]);\r\n\r\n\tconst customizeRenderEmpty = () => (\r\n\t\t<Row justify=\"center\" align=\"middle\" style={{ height: 360, flexDirection: 'column' }}>\r\n\t\t\t<img src={emptyImg} style={{ width: 266 }} alt=\"\" />\r\n\t\t\t<div>{t('暂无数据')}</div>\r\n\t\t</Row>\r\n\t);\r\n\r\n\tconst handdleFilterHeader = (dataColumns = [], data: any[]) => {\r\n\t\tconst columns = dataColumns.map((item: any) => item.dataIndex).filter((item: string) => item !== 'handle');\r\n\t\tconst sheetHeader = dataColumns.map((item: any) => item.title).filter((item: string) => item !== t('操作'));\r\n\t\tconst tarData: any = [];\r\n\r\n\t\tdata.forEach((dataRow: any) => {\r\n\t\t\tconst row: any = {};\r\n\t\t\tcolumns.map((colName: string) => {\r\n\t\t\t\tconst res = dataRow[colName];\r\n\t\t\t\trow[colName] = res || '';\r\n\t\t\t});\r\n\t\t\ttarData.push(row);\r\n\t\t});\r\n\r\n\t\tsetDataFormat({\r\n\t\t\theader: sheetHeader,\r\n\t\t\tdata: tarData,\r\n\t\t});\r\n\t};\r\n\r\n\t// const handleClickOutputExcel = () => {\r\n\t// \tconst option: any = {};\r\n\t// \toption.fileName = 'result';\r\n\t// \toption.datas = [\r\n\t// \t\t{\r\n\t// \t\t\tsheetData: dataFormat.data,\r\n\t// \t\t\tsheetName: 'sheet',\r\n\t// \t\t\tsheetHeader: dataFormat.header,\r\n\t// \t\t},\r\n\t// \t];\r\n\t// \tconst toExcel = new ExportJsonExcel(option);\r\n\t// \ttoExcel.saveExcel();\r\n\t// };\r\n\r\n\tconst handleExportJira = () => {\r\n\t\tconst header = dataFormat.header;\r\n\t\tconst data = dataFormat.data;\r\n\t\tlet str = '';\r\n\t\tif (header.length && data.length) {\r\n\t\t\tstr =\r\n\t\t\t\t'|' +\r\n\t\t\t\theader.join('|') +\r\n\t\t\t\t'|' +\r\n\t\t\t\t`\r\n`;\r\n\t\t\tdata.forEach((row: any) => {\r\n\t\t\t\tconst rowKey = Object.values(row).map((item) => {\r\n\t\t\t\t\tif (item === '') {\r\n\t\t\t\t\t\treturn ' ';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t});\r\n\t\t\t\tstr =\r\n\t\t\t\t\tstr +\r\n\t\t\t\t\t'|' +\r\n\t\t\t\t\trowKey.join('|') +\r\n\t\t\t\t\t'|' +\r\n\t\t\t\t\t`\r\n`;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tstr = '';\r\n\t\t}\r\n\r\n\t\treturn str;\r\n\t};\r\n\r\n\tconst handleExportText = () => {\r\n\t\tconst header = dataFormat.header;\r\n\t\tconst data = dataFormat.data;\r\n\t\tlet str = '';\r\n\t\tif (header.length && data.length) {\r\n\t\t\tstr =\r\n\t\t\t\theader.join('\t') +\r\n\t\t\t\t`\r\n`;\r\n\t\t\tdata.forEach((row: any) => {\r\n\t\t\t\tconst rowKey = Object.values(row).map((item) => {\r\n\t\t\t\t\tif (item === '') {\r\n\t\t\t\t\t\treturn ' ';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t});\r\n\t\t\t\tstr =\r\n\t\t\t\t\tstr +\r\n\t\t\t\t\trowKey.join('\t') +\r\n\t\t\t\t\t`\r\n`;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tstr = '';\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Space className=\"tablebox\" direction=\"vertical\" size=\"middle\">\r\n\t\t\t<Modal\r\n\t\t\t\twidth={1000}\r\n\t\t\t\tmaskClosable={false}\r\n\t\t\t\tcentered={true}\r\n\t\t\t\tbodyStyle={{ maxHeight: 500, overflow: 'auto' }}\r\n\t\t\t\tvisible={exportDataVisible}\r\n\t\t\t\ttitle={t('导出数据')}\r\n\t\t\t\tonCancel={() => {\r\n\t\t\t\t\tsetExportDataVisible(false);\r\n\t\t\t\t}}\r\n\t\t\t\tfooter={null}\r\n\t\t\t>\r\n\t\t\t\t<div style={{ position: 'relative' }}>\r\n\t\t\t\t\t<div className=\"mb16\"><span className=\"pr8\">{t('选择需要导出的列')}：</span><Checkbox.Group\r\n\t\t\t\t\t\toptions={props.columns\r\n\t\t\t\t\t\t\t.map((item: any) => ({ label: item.title, value: item.dataIndex }))\r\n\t\t\t\t\t\t\t.filter((item: any) => item.value !== 'handle')}\r\n\t\t\t\t\t\tdefaultValue={[]}\r\n\t\t\t\t\t\tvalue={filterValue}\r\n\t\t\t\t\t\tonChange={(values: any) => {\r\n\t\t\t\t\t\t\tsetFilterValue(values);\r\n\t\t\t\t\t\t\tconst columns = props.columns.filter((item: any) => ~values.indexOf(item.dataIndex));\r\n\t\t\t\t\t\t\thanddleFilterHeader(columns, props.dataSource);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/></div>\r\n\t\t\t\t\t<div style={{ position: 'absolute', right: 0, bottom: 0 }}>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\ttype=\"link\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetFilterValue(\r\n\t\t\t\t\t\t\t\t\tprops.columns\r\n\t\t\t\t\t\t\t\t\t\t.map((item: any) => item.dataIndex)\r\n\t\t\t\t\t\t\t\t\t\t.filter((item: any) => item !== 'handle'),\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\thanddleFilterHeader(props.columns, props.dataSource);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{t('全选')}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\ttype=\"link\"\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tsetFilterValue([]);\r\n\t\t\t\t\t\t\t\thanddleFilterHeader([], props.dataSource);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{t('反选')}\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Tabs>\r\n\t\t\t\t\t<Tabs.TabPane tab=\"Wiki格式\" key=\"jira\">\r\n\t\t\t\t\t\t<CopyToClipboard text={handleExportJira()} onCopy={() => message.success(t('已复制到粘贴板'))}>\r\n\t\t\t\t\t\t\t<pre style={{ cursor: 'pointer', minHeight: 100 }}>\r\n\t\t\t\t\t\t\t\t<code>{handleExportJira()}</code>\r\n\t\t\t\t\t\t\t</pre>\r\n\t\t\t\t\t\t</CopyToClipboard>\r\n\t\t\t\t\t</Tabs.TabPane>\r\n\t\t\t\t\t<Tabs.TabPane tab=\"Text格式\" key=\"test\">\r\n\t\t\t\t\t\t<CopyToClipboard text={handleExportText()} onCopy={() => message.success(t('已复制到粘贴板'))}>\r\n\t\t\t\t\t\t\t<pre style={{ cursor: 'pointer', minHeight: 100 }}>\r\n\t\t\t\t\t\t\t\t<code>{handleExportText()}</code>\r\n\t\t\t\t\t\t\t</pre>\r\n\t\t\t\t\t\t</CopyToClipboard>\r\n\t\t\t\t\t</Tabs.TabPane>\r\n\t\t\t\t\t{/* <Tabs.TabPane tab=\"Excel格式\" key=\"excel\">\r\n\t\t\t\t\t\t<Row justify=\"center\" align=\"middle\" style={{ minHeight: 100 }}>\r\n\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={handleClickOutputExcel}>\r\n\t\t\t\t\t\t\t\t\t导出Excel\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t</Tabs.TabPane> */}\r\n\t\t\t\t</Tabs>\r\n\t\t\t</Modal>\r\n\t\t\t{\r\n\t\t\t\tprops.titleNode || props.buttonNode || !props.cancelExportData ? <Row justify=\"space-between\" align=\"middle\">\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<Space align=\"center\">{props.titleNode}</Space>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<Space align=\"center\">\r\n\t\t\t\t\t\t\t{props.buttonNode}\r\n\t\t\t\t\t\t\t{props.cancelExportData ? null : (\r\n\t\t\t\t\t\t\t\t<Button style={{ marginLeft: 6 }} onClick={() => setExportDataVisible(true)}>\r\n\t\t\t\t\t\t\t\t\t{t('导出数据')}\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</Space>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row> : null\r\n\t\t\t}\r\n\t\t\t<ConfigProvider renderEmpty={customizeRenderEmpty}>\r\n\t\t\t\t<Table\r\n\t\t\t\t\tsize={props.size || 'middle'}\r\n\t\t\t\t\trowKey={props.rowKey ? props.rowKey : 'id'}\r\n\t\t\t\t\tdataSource={props.dataSource}\r\n\t\t\t\t\t// columns={props.columns}\r\n\t\t\t\t\tcomponents={{ header: { cell: ResizableTitle } }}\r\n\t\t\t\t\tcolumns={customColumns}\r\n\t\t\t\t\tpagination={props.pagination !== false ? { ...props.pagination } : false}\r\n\t\t\t\t\tscroll={currentTableScroll}\r\n\t\t\t\t\tloading={props.loading}\r\n\t\t\t\t\tonChange={props.onChange}\r\n\t\t\t\t\trowSelection={props.rowSelection}\r\n\t\t\t\t/>\r\n\t\t\t</ConfigProvider>\r\n\t\t</Space>\r\n\t);\r\n};\r\n\r\nexport default TableBox;\r\n","import { AxiosResponse } from 'axios'\r\nimport axios, { AxiosResFormat } from '.'\r\nimport { TTaskStatus } from '../pages/DataSearch/interface'\r\n\r\nexport const actionRun = (params: {\r\n    sql: string,\r\n    [key: string]: any\r\n}): Promise<AxiosResponse<{\r\n    err_msg: string\r\n    log_url: string\r\n    task_id: string\r\n    task_url: string\r\n}>> => {\r\n    return axios.post('/idex/submit_task', params)\r\n}\r\n\r\nexport const actionGetDataSearchRes = (task_id: string): Promise<AxiosResponse<{\r\n    err_msg: string\r\n    result: Array<Array<string | number>>\r\n    state: TTaskStatus\r\n    task_url: string\r\n    result_url: string\r\n    stage: any\r\n    spark_log_url: string\r\n    spark_ui_url: string\r\n}>> => {\r\n    return axios.get(`/idex/look/${task_id}`,)\r\n}\r\n\r\nexport const getIdexDBList = (): Promise<AxiosResponse<{\r\n    dbs: string[]\r\n}>> => {\r\n    return axios.get(`/idex/get_user_db`)\r\n}\r\n\r\nexport const getIdexTableList = (table: string): Promise<AxiosResponse<{\r\n    tables: string[]\r\n}>> => {\r\n    return axios.get(`/idex/get_user_db_tables/${table}`)\r\n}\r\n\r\nexport const getIdexTaskDownloadUrl = (id: string, separator: string): Promise<AxiosResponse<{\r\n    download_url: string\r\n}>> => {\r\n    return axios.get(`/idex/download_url/${id}`, {\r\n        params: {\r\n            separator\r\n        }\r\n    })\r\n}\r\n\r\nexport const getIdexTaskResult = (id: string): Promise<AxiosResponse<{\r\n    err_msg: string\r\n    result: Array<Array<string | number>>\r\n}>> => {\r\n    return axios.get(`/idex/result/${id}`)\r\n}\r\n\r\nexport const stopIndxTask = (id: string): Promise<AxiosResponse<{\r\n    err_msg: string\r\n    result: Array<Array<string | number>>\r\n}>> => {\r\n    return axios.get(`/idex/stop/${id}`)\r\n}\r\n\r\n\r\nexport const getIndexResourceOverview = (group_id: string): Promise<AxiosResponse<{\r\n    err_msg: string\r\n    result: Array<Array<string | number>>\r\n}>> => {\r\n    return axios.get(`/idex/get_resource/${group_id}`)\r\n}\r\n\r\nexport interface IIdexFormConfigItem {\r\n    id: string,\r\n    label: string,\r\n    type: 'input' | 'select' | 'input-select',\r\n    value: IIdexFormConfigOption[]\r\n    defaultValue: string\r\n    multiple: boolean\r\n    disable: boolean\r\n    placeHolder: string\r\n}\r\n\r\nexport interface IIdexFormConfigOption {\r\n    label: string\r\n    value: string\r\n    relate: {\r\n        relateId: string\r\n        value: IIdexFormConfigOption[]\r\n    }\r\n}\r\n\r\nexport const getIdexFormConfig = (): Promise<AxiosResponse<{\r\n    result: IIdexFormConfigItem[]\r\n}>> => {\r\n    return axios.get(`/idex/config`)\r\n}","import React from 'react';\r\nimport CodeMirror, { ReactCodeMirrorProps } from '@uiw/react-codemirror';\r\nimport { bbedit } from '@uiw/codemirror-theme-bbedit';\r\nimport { zebraStripes } from '@uiw/codemirror-extensions-zebra-stripes';\r\nimport { sql } from '@codemirror/lang-sql';\r\n\r\ninterface IProps extends ReactCodeMirrorProps {\r\n\r\n}\r\n\r\nconst sqlLang = `CREATE TABLE dbo.EmployeePhoto\r\n(\r\n    EmployeeId INT NOT NULL PRIMARY KEY,\r\n    Photo VARBINARY(MAX) FILESTREAM NULL,\r\n    MyRowGuidColumn UNIQUEIDENTIFIER NOT NULL ROWGUIDCOL\r\n                    UNIQUE DEFAULT NEWID()\r\n);\r\n\r\nGO\r\n\r\n/*\r\ntext_of_comment\r\n/* nested comment */\r\n*/\r\n\r\n-- line comment\r\n\r\nCREATE NONCLUSTERED INDEX IX_WorkOrder_ProductID\r\n    ON Production.WorkOrder(ProductID)\r\n    WITH (FILLFACTOR = 80,\r\n        PAD_INDEX = ON,\r\n        DROP_EXISTING = ON);\r\nGO\r\n\r\nWHILE (SELECT AVG(ListPrice) FROM Production.Product) < $300\r\nBEGIN\r\n   UPDATE Production.Product\r\n      SET ListPrice = ListPrice * 2\r\n   SELECT MAX(ListPrice) FROM Production.Product\r\n   IF (SELECT MAX(ListPrice) FROM Production.Product) > $500\r\n      BREAK\r\n   ELSE\r\n      CONTINUE\r\nEND\r\nPRINT 'Too much for the market to bear';\r\n\r\nMERGE INTO Sales.SalesReason AS [Target]\r\nUSING (VALUES ('Recommendation','Other'), ('Review', 'Marketing'), ('Internet', 'Promotion'))\r\n       AS [Source] ([NewName], NewReasonType)\r\nON [Target].[Name] = [Source].[NewName]\r\nWHEN MATCHED\r\nTHEN UPDATE SET ReasonType = [Source].NewReasonType\r\nWHEN NOT MATCHED BY TARGET\r\nTHEN INSERT ([Name], ReasonType) VALUES ([NewName], NewReasonType)\r\nOUTPUT $action INTO @SummaryOfChanges;\r\n\r\nSELECT ProductID, OrderQty, SUM(LineTotal) AS Total\r\nFROM Sales.SalesOrderDetail\r\nWHERE UnitPrice < $5.00\r\nGROUP BY ProductID, OrderQty\r\nORDER BY ProductID, OrderQty\r\nOPTION (HASH GROUP, FAST 10);\r\n`;\r\n\r\n// https://uiwjs.github.io/react-codemirror/\r\n// https://www.npmjs.com/package/@uiw/react-codemirror\r\n// https://github.com/uiwjs/react-codemirror\r\nexport default function CodeEdit(props: IProps) {\r\n  return (\r\n    <>\r\n      <CodeMirror\r\n        theme={bbedit}\r\n        value={props.value}\r\n        onChange={props.onChange}\r\n        extensions={[\r\n          sql(),\r\n          zebraStripes({\r\n            step: 2,\r\n            lightColor: '#fafafa',\r\n            darkColor: '#fafafa',\r\n          })]} />\r\n    </>\r\n  )\r\n}\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import { Controlled as CodeMirror } from 'react-codemirror2';\r\n// // 主题\r\n// import 'codemirror/lib/codemirror.css';\r\n// import 'codemirror/theme/solarized.css';\r\n// // 代码模式\r\n// import 'codemirror/mode/sql/sql';\r\n// // 代码补全\r\n// import 'codemirror/addon/hint/show-hint.css'\r\n// import 'codemirror/addon/hint/sql-hint';\r\n// import 'codemirror/addon/hint/show-hint';\r\n// import 'codemirror/addon/edit/closebrackets';\r\n// import 'codemirror/addon/hint/anyword-hint.js';\r\n// //折叠代码\r\n// import 'codemirror/addon/fold/foldgutter.css';\r\n// import 'codemirror/addon/fold/foldcode.js';\r\n// import 'codemirror/addon/fold/foldgutter.js';\r\n// import 'codemirror/addon/fold/brace-fold.js';\r\n// import 'codemirror/addon/fold/comment-fold.js';\r\n// // 代码高亮\r\n// import 'codemirror/addon/selection/active-line';\r\n\r\n// interface IProps {\r\n//   value?: string;\r\n//   onChange?: (value: string) => void;\r\n//   onSelect?: (value: string) => void\r\n//   readonly?: boolean\r\n// }\r\n\r\n// // https://github.com/scniro/react-codemirror2\r\n// // https://xudany.github.io/codemirror/2020/07/21/CodeMirror%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%90%E7%A4%BA%E5%8A%9F%E8%83%BD/\r\n// export default function CodeEdit(props: IProps) {\r\n//   const [instance, setInstance] = useState<any>(null);\r\n\r\n//   return (\r\n//     <>\r\n//       <CodeMirror\r\n//         editorDidMount={(editor) => {\r\n//           setInstance(editor);\r\n//         }}\r\n//         value={props.value || ''}\r\n//         options={{\r\n//           placeholder: '输入SQL进行查询',\r\n//           mode: 'sql',\r\n//           theme: 'solarized',\r\n//           lineNumbers: true,\r\n//           smartIndent: true,\r\n//           lineWrapping: true,\r\n//           styleActiveLine: true,\r\n//           foldGutter: true,\r\n//           matchBrackets: true, //括号匹配，光标旁边的括号都高亮显示\r\n//           autoCloseBrackets: true, //键入时将自动关闭()[]{}''\"\"\r\n//           gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter'],\r\n//           extraKeys: { Ctrl: 'autocomplete' },\r\n//           hintOptions: {\r\n//             completeSingle: false,\r\n//             alignWithWord: true\r\n//           },\r\n//         }}\r\n//         onCursorActivity={(editor) => {\r\n//           // console.log(editor.getSelection())\r\n//           const value = editor.getSelection()\r\n//           props.onSelect && props.onSelect(value)\r\n//         }}\r\n//         onBeforeChange={(editor, data, value) => {\r\n//           if (!props.readonly) {\r\n//             if (data.origin !== 'complete') {\r\n//               editor.execCommand('autocomplete');\r\n//             }\r\n//             props.onChange && props.onChange(value);\r\n//           }\r\n//         }}\r\n//       // onChange={(editor, data, value) => {\r\n//       //   console.log(editor, data, value)\r\n//       //   props.onChange && props.onChange(value);\r\n//       // }}\r\n//       />\r\n//     </>\r\n//   );\r\n// }","import { CaretRightOutlined, CloseCircleOutlined, CloseOutlined, DeleteOutlined, DownloadOutlined, LoadingOutlined, QuestionCircleOutlined, RedoOutlined, StopOutlined } from '@ant-design/icons';\r\nimport { Button, Col, Collapse, message, Modal, Row, Select, Spin, Steps, Tooltip } from 'antd'\r\nimport React, { useRef, useState } from 'react'\r\nimport TableBox from '../../components/TableBox/TableBox';\r\nimport { TTaskStep, IEditorTaskItem, TTaskStatus } from './interface'\r\nimport './DataSearch.less';\r\nimport { getIdexTaskDownloadUrl, getIdexTaskResult, stopIndxTask } from '../../api/dataSearchApi';\r\nimport { useTranslation } from 'react-i18next';\r\n// import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\r\n\r\nexport interface ITaskListItem { }\r\n\r\ninterface IProps {\r\n    onDelete: (id: string) => void,\r\n    onRetry: (id: string) => void,\r\n    option: Record<string, IEditorTaskItem>\r\n}\r\n\r\nconst stepMap: Record<TTaskStep, number> = {\r\n    'start': 0,\r\n    'parse': 1,\r\n    'execute': 2,\r\n    'end': 3\r\n}\r\n\r\nconst statusIconMap = (status: TTaskStatus) => {\r\n    switch (status) {\r\n        case 'init':\r\n        case 'running':\r\n            return <LoadingOutlined />\r\n        case 'failure':\r\n            return <CloseCircleOutlined style={{ color: '#ff4444' }} />\r\n        case 'stop':\r\n            return <QuestionCircleOutlined />\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nexport default function TaskList(props: IProps) {\r\n    const { t, i18n } = useTranslation();\r\n    const [visibleDownload, setVisibleDownload] = useState(false)\r\n    const [visibleResult, setVisibleResult] = useState(false)\r\n    // const [dataConfig, setDataConfig] = useState<any>([])\r\n    // const [dataResult, setDataResult] = useState<Record<string, any>[]>([])\r\n    const [loadingResult, setLoadingResult] = useState(true)\r\n\r\n    // const [dataConfig, _setDataConfig] = useState<any>([])\r\n    // const dataConfigRef = useRef(dataConfig);\r\n    // const setDataConfig = (data: any): void => {\r\n    //     dataConfigRef.current = data;\r\n    //     _setDataConfig(data);\r\n    // };\r\n\r\n    // const [dataResult, _setDataResult] = useState<any>([])\r\n    // const dataResultRef = useRef(dataResult);\r\n    // const setDataResult = (data: any): void => {\r\n    //     dataResultRef.current = data;\r\n    //     _setDataResult(data);\r\n    // };\r\n\r\n    const [separator, _setSeparator] = useState<string>('|')\r\n    const separatorRef = useRef(separator);\r\n    const setSeparator = (data: string): void => {\r\n        separatorRef.current = data;\r\n        _setSeparator(data);\r\n    };\r\n\r\n    const [currentReqId, _setCurrentReqId] = useState<string>('|')\r\n    const currentReqIdRef = useRef(currentReqId);\r\n    const setCurrentReqId = (data: string): void => {\r\n        currentReqIdRef.current = data;\r\n        _setCurrentReqId(data);\r\n    };\r\n\r\n    const onChange = (key: string | string[]) => {\r\n        console.log(key);\r\n    };\r\n\r\n    const handleResultData = (result: (string | number)[][]) => {\r\n        const header = result[0] || []\r\n        const data = result.slice(1)\r\n        const targetData = data.map((row) => {\r\n            const rowItem = row.reduce((pre, next, index) => ({ ...pre, [header[index]]: next }), {})\r\n            return rowItem\r\n        })\r\n        const headerConfig = header.map(item => ({\r\n            title: item,\r\n            dataIndex: item,\r\n            key: item,\r\n            width: 120,\r\n        }))\r\n        // targetData.unshift(header)\r\n        // setDataConfig(headerConfig)\r\n        // setDataResult(targetData)\r\n\r\n        return {\r\n            config: headerConfig,\r\n            data: targetData\r\n        }\r\n    }\r\n\r\n    // const handleClickDownload = (id: any) => {\r\n    //     Modal.confirm({\r\n    //         title: '下载结果',\r\n    //         icon: <DownloadOutlined />,\r\n    //         content: <div>\r\n    //             <div className=\"d-f ac pt16\">\r\n    //                 <div className=\"w72\">分隔符：</div>\r\n    //                 {console.log('separatorRef.current', separatorRef.current, separator)}\r\n    //                 <Select style={{ width: 256 }} value={separatorRef.current} options={[{\r\n    //                     label: '|',\r\n    //                     value: '|'\r\n    //                 }, {\r\n    //                     label: ',',\r\n    //                     value: ','\r\n    //                 }, {\r\n    //                     label: 'tab',\r\n    //                     value: 'tab'\r\n    //                 }]} onChange={(value) => {\r\n\r\n    //                     // separatorRef.current = value\r\n    //                     setSeparator(value)\r\n    //                     _setSeparator(value)\r\n    //                     console.log(value, separatorRef.current);\r\n    //                 }} />\r\n    //             </div>\r\n    //         </div>,\r\n    //         okText: `确认`,\r\n    //         cancelText: '取消',\r\n    //         onOk() {\r\n    //             return new Promise((resolve, reject) => {\r\n    //                 getIdexTaskDownloadUrl(id).then(res => {\r\n    //                     window.open(res.data.download_url, 'bank')\r\n    //                     resolve('')\r\n    //                 }).catch(err => {\r\n    //                     reject()\r\n    //                 })\r\n    //             })\r\n    //                 .then((res) => {\r\n    //                     message.success('下载成功');\r\n    //                 })\r\n    //                 .catch(() => {\r\n    //                     message.error('下载失败');\r\n    //                 });\r\n    //         },\r\n    //         onCancel() { },\r\n    //     });\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {/* <Modal\r\n                title={`下载结果`}\r\n                visible={visibleResult}\r\n                footer={null}\r\n                width={1248}\r\n                destroyOnClose\r\n                onCancel={() => {\r\n                    setVisibleResult(false)\r\n                }}>\r\n                <Spin spinning={loadingResult}>\r\n                    <Spreadsheet height={700} width={1200} dataSource={dataResult} />\r\n                </Spin>\r\n            </Modal> */}\r\n\r\n            <Modal\r\n                title={t('结果')}\r\n                visible={visibleDownload}\r\n                footer={null}\r\n                destroyOnClose\r\n                onCancel={() => {\r\n                    setSeparator('|')\r\n                    setVisibleDownload(false)\r\n                }}>\r\n                <div>\r\n                    <div className=\"d-f ac pt8\">\r\n                        <div className=\"w96\">{t('选择分隔符')}：</div>\r\n                        <Select style={{ width: 256 }} value={separatorRef.current} options={[{\r\n                            label: '|',\r\n                            value: '|'\r\n                        }, {\r\n                            label: ',',\r\n                            value: ','\r\n                        }, {\r\n                            label: 'TAB',\r\n                            value: 'TAB'\r\n                        }]} onChange={(value) => {\r\n                            setSeparator(value)\r\n                        }} />\r\n                    </div>\r\n                    <div className=\"ta-r pt16\">\r\n                        <Button type=\"primary\" onClick={() => {\r\n                            getIdexTaskDownloadUrl(currentReqIdRef.current, separatorRef.current).then(res => {\r\n                                window.open(res.data.download_url, 'bank')\r\n                            }).catch(err => {\r\n                                console.log(err)\r\n                            })\r\n                        }}>{t('下载')}</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n            <Collapse className=\"site-collapse-custom-collapse\" defaultActiveKey={['task_0']} onChange={onChange}>\r\n                {\r\n                    (Object.entries(props.option).reduce((pre: IEditorTaskItem[], [key, value]) => ([...pre, value]), []) || []).reverse().filter(item => !!item.reqId).map((item, index) => {\r\n                        return (\r\n                            <Collapse.Panel className={['site-collapse-custom-panel', `status-${item.status}`].join(' ')} header={`${t('子任务')}${item.reqId}`} key={`task_${index}`} extra={\r\n                                <>\r\n                                    <Button className=\"mr16\" type=\"default\" size='small' onClick={(e) => {\r\n                                        e.stopPropagation();\r\n                                        props.onDelete(item.reqId)\r\n                                    }}>{t('删除')}<DeleteOutlined /></Button>\r\n                                    <Button type=\"primary\" size='small' onClick={(e) => {\r\n                                        e.stopPropagation();\r\n                                        props.onRetry(item.reqId)\r\n                                    }}\r\n                                    >{t('重试')}<RedoOutlined /></Button>\r\n                                </>\r\n                            }>\r\n                                <Steps size=\"small\" current={stepMap[item.step]}>\r\n                                    <Steps.Step title={t('准备开始')} icon={stepMap[item.step] === 0 ? statusIconMap(item.status) : null} />\r\n                                    <Steps.Step title={t('解析')} icon={stepMap[item.step] === 1 ? statusIconMap(item.status) : null} />\r\n                                    <Steps.Step title={t('执行')} icon={stepMap[item.step] === 2 ? statusIconMap(item.status) : null} />\r\n                                    <Steps.Step title={t('输出结果')} icon={stepMap[item.step] === 3 ? statusIconMap(item.status) : null} />\r\n                                </Steps>\r\n                                <TableBox\r\n                                    size={\"small\"}\r\n                                    loading={false}\r\n                                    cancelExportData={true}\r\n                                    rowKey={(record: any) => {\r\n                                        return JSON.stringify(record)\r\n                                    }}\r\n                                    columns={[{\r\n                                        title: t('子任务'),\r\n                                        dataIndex: 'content',\r\n                                        key: 'content',\r\n                                        render: (text: any) => {\r\n                                            return <Tooltip\r\n                                                placement=\"top\"\r\n                                                title={text}\r\n                                            >\r\n                                                <div className=\"ellip1 w256\">{text}</div>\r\n                                            </Tooltip>\r\n                                        }\r\n                                    },\r\n                                    // {\r\n                                    //     title: '数据库',\r\n                                    //     dataIndex: 'database',\r\n                                    //     key: 'database',\r\n                                    // }, {\r\n                                    //     title: '表',\r\n                                    //     dataIndex: 'table',\r\n                                    //     key: 'table',\r\n                                    // },\r\n                                    {\r\n                                        title: t('开始时间'),\r\n                                        dataIndex: 'startime',\r\n                                        key: 'startime',\r\n                                    }, {\r\n                                        title: t('运行时长'),\r\n                                        dataIndex: 'duration',\r\n                                        key: 'duration',\r\n                                    }, {\r\n                                        title: t('状态'),\r\n                                        dataIndex: 'status',\r\n                                        key: 'status',\r\n                                        render: (text: any) => {\r\n                                            return <span className={[`c-${item.status}`].join(' ')}>{text}</span>\r\n                                        }\r\n                                    }, {\r\n                                        title: t('操作'),\r\n                                        dataIndex: 'action',\r\n                                        key: 'action',\r\n                                        render: () => {\r\n                                            return <>\r\n                                                <span className=\"link mr16\" onClick={() => {\r\n                                                    // setVisibleDetail(true)\r\n                                                    Modal.info({\r\n                                                        title: t('任务详情'),\r\n                                                        width: 600,\r\n                                                        okText: t('关闭'),\r\n                                                        content: (\r\n                                                            <div>\r\n                                                                <Row className=\"mb16\">\r\n                                                                    <Col span={6}><div className=\"ta-r\"><strong>{t('开始时间')}：</strong></div></Col>\r\n                                                                    <Col span={18}>{item.startTime}</Col>\r\n                                                                </Row>\r\n                                                                <Row className=\"mb16\">\r\n                                                                    <Col span={6}><div className=\"ta-r\"><strong>{t('运行时长')}：</strong></div></Col>\r\n                                                                    <Col span={18}>{item.duration}</Col>\r\n                                                                </Row>\r\n                                                                <Row className=\"mb16\">\r\n                                                                    <Col span={6}><div className=\"ta-r\"><strong>{t('状态')}：</strong></div></Col>\r\n                                                                    <Col span={18}>{item.status}</Col>\r\n                                                                </Row>\r\n                                                                <Row className=\"mb16\">\r\n                                                                    <Col span={6}><div className=\"ta-r\"><strong>{t('子任务内容')}：</strong></div></Col>\r\n                                                                    <Col span={18}>{item.content}</Col>\r\n                                                                </Row>\r\n                                                                <Row className=\"mb16\">\r\n                                                                    <Col span={6}><div className=\"ta-r\"><strong>{t('任务信息')}：</strong></div></Col>\r\n                                                                    <Col span={18}>{item.message}</Col>\r\n                                                                </Row>\r\n                                                            </div>\r\n                                                        ),\r\n                                                        onOk() { },\r\n                                                    });\r\n                                                }}>{t('详情')}</span>\r\n                                                {\r\n                                                    !(item.step === 'end' && item.status === 'success') ? <span className=\"link mr16\" onClick={() => {\r\n                                                        Modal.confirm({\r\n                                                            title: t('终止任务'),\r\n                                                            icon: <StopOutlined />,\r\n                                                            content: '',\r\n                                                            okText: t('确认'),\r\n                                                            cancelText: t('取消'),\r\n                                                            onOk() {\r\n                                                                return new Promise((resolve, reject) => {\r\n                                                                    stopIndxTask(item.reqId).then(res => {\r\n                                                                        resolve('')\r\n                                                                    }).catch(err => {\r\n                                                                        reject()\r\n                                                                    })\r\n                                                                })\r\n                                                                    .then((res) => {\r\n                                                                        message.success(t('终止成功'));\r\n                                                                    })\r\n                                                                    .catch(() => {\r\n                                                                        message.error(t('终止失败'));\r\n                                                                    });\r\n                                                            },\r\n                                                            onCancel() { },\r\n                                                        });\r\n                                                    }}>{t('终止')}</span> : null\r\n                                                }\r\n                                                {\r\n                                                    !!item.log ? <span className=\"link mr16\" onClick={() => {\r\n                                                        window.open(item.log, 'bank')\r\n                                                    }}>{t('日志')}</span> : null\r\n                                                }\r\n                                                {\r\n                                                    item.step === 'end' && item.status === 'success' ? <span className=\"link mr16\" onClick={() => {\r\n                                                        setLoadingResult(true)\r\n                                                        getIdexTaskResult(item.reqId).then(res => {\r\n                                                            setVisibleResult(true)\r\n                                                            const result = res.data.result\r\n                                                            handleResultData(result)\r\n                                                            const handleData = handleResultData(result)\r\n                                                            // setDataResult(handleData)\r\n                                                            Modal.info({\r\n                                                                title: t('结果查看'),\r\n                                                                content: (\r\n                                                                    <div>\r\n                                                                        {/* {(result || [])?.map(item => {\r\n                                                                            return <div>{item}</div>\r\n                                                                        })} */}\r\n                                                                        <TableBox\r\n\r\n                                                                            size={\"small\"}\r\n                                                                            loading={false}\r\n                                                                            cancelExportData={true}\r\n                                                                            rowKey={(record: any) => {\r\n                                                                                return JSON.stringify(record)\r\n                                                                            }}\r\n                                                                            columns={handleData.config}\r\n                                                                            pagination={false}\r\n                                                                            dataSource={handleData.data}\r\n                                                                            scroll={{ x: 'auto' }}\r\n                                                                        />\r\n                                                                    </div>\r\n                                                                ),\r\n                                                                onOk() { },\r\n                                                            });\r\n                                                        }).catch(err => { }).finally(() => {\r\n                                                            setLoadingResult(false)\r\n                                                        })\r\n                                                    }}>{t('结果')}</span> : null\r\n                                                }\r\n                                                {\r\n                                                    item.step === 'end' && item.status === 'success' ? <span className=\"link\" onClick={() => {\r\n                                                        // handleClickDownload(item.reqId)\r\n                                                        setCurrentReqId(item.reqId)\r\n                                                        setVisibleDownload(true)\r\n                                                    }}>{t('下载')}</span> : null\r\n                                                }\r\n                                            </>\r\n                                        }\r\n                                    }]}\r\n                                    pagination={false}\r\n                                    dataSource={[{\r\n                                        content: item.content,\r\n                                        database: item.database || '-',\r\n                                        table: item.table || '-',\r\n                                        startime: item.startTime,\r\n                                        duration: item.duration || '-',\r\n                                        status: item.status\r\n                                    }]}\r\n                                />\r\n                            </Collapse.Panel>\r\n                        )\r\n                    })\r\n                }\r\n\r\n                {/* <Collapse.Panel className=\"site-collapse-custom-panel status-error\" header=\"子任务2\" key=\"2\" >\r\n                    <Steps size=\"small\" current={1}>\r\n                        <Steps.Step title=\"准备开始\" />\r\n                        <Steps.Step title=\"解析中\" icon={<LoadingOutlined />} />\r\n                        <Steps.Step title=\"执行中\" />\r\n                        <Steps.Step title=\"输出结果\" />\r\n                    </Steps>\r\n                    <TableBox\r\n                        size={\"small\"}\r\n                        loading={false}\r\n                        cancelExportData={true}\r\n                        rowKey={(record: any) => {\r\n                            return JSON.stringify(record)\r\n                        }}\r\n                        columns={[{\r\n                            title: '子任务',\r\n                            dataIndex: 'task',\r\n                            key: 'task',\r\n                        }, {\r\n                            title: '开始时间',\r\n                            dataIndex: 'startime',\r\n                            key: 'startime',\r\n                        }, {\r\n                            title: '运行时长',\r\n                            dataIndex: 'time',\r\n                            key: 'time',\r\n                        }, {\r\n                            title: '状态',\r\n                            dataIndex: 'status',\r\n                            key: 'status',\r\n                        }, {\r\n                            title: '操作',\r\n                            dataIndex: 'action',\r\n                            key: 'action',\r\n                            render: () => {\r\n                                return <>\r\n                                    <span className=\"link mr16\">详情</span>\r\n                                    <span className=\"link mr16\">日志</span>\r\n                                    <span className=\"link\">结果</span>\r\n                                </>\r\n                            }\r\n                        }]}\r\n                        pagination={false}\r\n                        dataSource={[{\r\n                            task: 'test',\r\n                            startime: '2022-08-09 17:45:46',\r\n                            time: '3分钟43秒',\r\n                            status: 'error'\r\n                        }]}\r\n                    />\r\n                </Collapse.Panel>\r\n                <Collapse.Panel className=\"site-collapse-custom-panel status-running\" header=\"子任务3\" key=\"3\">\r\n                    <p>{345}</p>\r\n                </Collapse.Panel> */}\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n","import { Form } from 'antd'\r\nimport Select, { LabeledValue } from 'antd/lib/select';\r\nimport React, { useEffect, useImperativeHandle, useState } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { IIdexFormConfigItem } from '../../api/dataSearchApi'\r\nimport InputSearch from '../../components/InputSearch/InputSearch';\r\nimport './ConfigFormData.less';\r\n\r\nexport type TDataValue = Record<any, any>\r\n\r\nexport interface IConfigFormDataOptionItem extends IIdexFormConfigItem { }\r\n\r\nexport interface IProps {\r\n    dataValue?: TDataValue\r\n    option: IConfigFormDataOptionItem[]\r\n    onChange: (dataValue: TDataValue) => void\r\n    onConfigChange?: (config: IConfigFormDataOptionItem[]) => void\r\n}\r\n\r\nconst ConfigFormData = React.forwardRef((props: IProps, ref) => {\r\n    const { t, i18n } = useTranslation();\r\n    const [form] = Form.useForm();\r\n    const [, updateState] = useState<any>();\r\n\r\n    useImperativeHandle(ref, () => ({\r\n        onSubmit: () => {\r\n            return new Promise((resolve, reject) => {\r\n                form.validateFields().then(res => {\r\n                    resolve(res)\r\n                }).catch(err => {\r\n                    reject(err)\r\n                })\r\n            })\r\n        },\r\n        setData: (data: Record<any, any>) => {\r\n            form.setFieldsValue(data)\r\n        }\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (props.dataValue) {\r\n            form.setFieldsValue(props.dataValue)\r\n        }\r\n    }, [props.option])\r\n\r\n    const renderInput = (config: IConfigFormDataOptionItem, itemProps: Record<string, any>) => {\r\n        return <div></div>\r\n    }\r\n\r\n    const renderSelect = (config: IConfigFormDataOptionItem, itemProps: Record<string, any>) => {\r\n        const options: LabeledValue[] = config.value || []\r\n        return <Form.Item\r\n            key={`configFormData_${config.id}`}\r\n            label={config.label}\r\n            name={config.id}\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: `${t('请选择')}${config.label}`,\r\n                },\r\n            ]}\r\n            initialValue={config.defaultValue}\r\n            style={{ marginBottom: 0, marginRight: 16 }}\r\n            {...itemProps}\r\n        >\r\n            <Select\r\n                style={{ width: 200 }}\r\n                mode={config.multiple ? 'multiple' : undefined}\r\n                showSearch\r\n                disabled={config.disable}\r\n                optionFilterProp=\"label\"\r\n                placeholder={config.placeHolder || `${t('请选择')} ${config.label}`}\r\n                options={options}\r\n                onChange={(value, rowOption: any) => {\r\n                    if (rowOption.relate) {\r\n                        const relateId = rowOption.relate.relateId\r\n                        const relateOption = rowOption.relate.value\r\n                        const currentOption = props.option\r\n                        for (let i = 0; i < currentOption.length; i++) {\r\n                            const item = currentOption[i];\r\n                            if (item.id === relateId) {\r\n                                item.value = relateOption\r\n                            }\r\n                        }\r\n                        props.onConfigChange && props.onConfigChange(currentOption)\r\n                    }\r\n                    props.onChange && props.onChange(form.getFieldsValue())\r\n                }} />\r\n        </Form.Item>\r\n    }\r\n\r\n    const renderInputSelect = (config: IConfigFormDataOptionItem, itemProps: Record<string, any>) => {\r\n        const options: LabeledValue[] = config.value || []\r\n        const inputSelectOption = options.map(item => (item.value)) as string[]\r\n        return <Form.Item\r\n            key={`configFormData_${config.id}`}\r\n            label={config.label}\r\n            name={config.id}\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: `${t('请选择')}${config.label}`,\r\n                },\r\n            ]}\r\n            initialValue={config.defaultValue}\r\n            style={{ marginBottom: 0 }}\r\n            {...itemProps}\r\n        >\r\n            <InputSearch\r\n                isOpenSearchMatch\r\n                onChange={() => {\r\n                    props.onChange && props.onChange(form.getFieldsValue())\r\n                }}\r\n                options={inputSelectOption} width={'500px'} />\r\n        </Form.Item>\r\n    }\r\n\r\n\r\n    const dispatchRenderFormItem = (item: IConfigFormDataOptionItem, itemProps: Record<string, any> = {}): JSX.Element | null => {\r\n        switch (item.type) {\r\n            case 'input':\r\n                return renderInput(item, itemProps)\r\n            case 'select':\r\n                return renderSelect(item, itemProps)\r\n            case 'input-select':\r\n                return renderInputSelect(item, itemProps)\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"configformdata-container d-f ac\">\r\n            <Form form={form} component={false}>\r\n                {\r\n                    console.log('props.option', props.option)\r\n                }\r\n                {\r\n                    props.option.map((component) => {\r\n                        return dispatchRenderFormItem(component)\r\n                    })\r\n                }\r\n            </Form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ConfigFormData\r\n","import Icon, { ExclamationCircleOutlined, MenuOutlined, ReloadOutlined, RightCircleOutlined, SaveOutlined, SlidersOutlined, StarOutlined, StopOutlined } from '@ant-design/icons';\r\nimport { Button, Drawer, message, Modal, Select, Switch, Tabs, Tooltip } from 'antd'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { actionGetDataSearchRes, actionRun, getIdexFormConfig } from '../../api/dataSearchApi';\r\nimport CodeEdit from '../../components/CodeEdit'\r\nimport InputSearch from '../../components/InputSearch/InputSearch';\r\nimport Draggable from 'react-draggable';\r\nimport './DataSearch.less';\r\nimport TaskList from './TaskList';\r\nimport { IEditorTaskItem, IEditorStore, IEditorItem, IEditorItemParams } from './interface';\r\nimport moment from 'moment'\r\nimport { data2Time } from '../../util';\r\n// import LineChartTemplate from '../../components/LineChartTemplate/LineChartTemplate';\r\nimport LoadingStar from '../../components/LoadingStar/LoadingStar';\r\nimport cookies from 'js-cookie';\r\nimport ConfigFormData, { IConfigFormDataOptionItem } from './ConfigFormData';\r\nimport { useTranslation } from 'react-i18next';\r\nconst userName = cookies.get('myapp_username')\r\n\r\nconst createId = () => {\r\n    return Math.random().toString(36).substring(2)\r\n}\r\n\r\nconst sqlMap: Record<string, string> = {\r\n    'test': `CREATE TABLE dbo.EmployeePhoto\r\n    (\r\n        EmployeeId INT NOT NULL PRIMARY KEY,\r\n        Photo VARBINARY(MAX) FILESTREAM NULL,\r\n        MyRowGuidColumn UNIQUEIDENTIFIER NOT NULL ROWGUIDCOL\r\n                        UNIQUE DEFAULT NEWID()\r\n    );\r\n    \r\n    GO\r\n    \r\n    /*\r\n    text_of_comment\r\n    /* nested comment */\r\n    */\r\n    \r\n    -- line comment\r\n    \r\n    CREATE NONCLUSTERED INDEX IX_WorkOrder_ProductID\r\n        ON Production.WorkOrder(ProductID)\r\n        WITH (FILLFACTOR = 80,\r\n            PAD_INDEX = ON,\r\n            DROP_EXISTING = ON);\r\n    GO\r\n    \r\n    WHILE (SELECT AVG(ListPrice) FROM Production.Product) < $300\r\n    BEGIN\r\n       UPDATE Production.Product\r\n          SET ListPrice = ListPrice * 2\r\n       SELECT MAX(ListPrice) FROM Production.Product\r\n       IF (SELECT MAX(ListPrice) FROM Production.Product) > $500\r\n          BREAK\r\n       ELSE\r\n          CONTINUE\r\n    END\r\n    PRINT 'Too much for the market to bear';\r\n    \r\n    MERGE INTO Sales.SalesReason AS [Target]\r\n    USING (VALUES ('Recommendation','Other'), ('Review', 'Marketing'), ('Internet', 'Promotion'))\r\n           AS [Source] ([NewName], NewReasonType)\r\n    ON [Target].[Name] = [Source].[NewName]\r\n    WHEN MATCHED\r\n    THEN UPDATE SET ReasonType = [Source].NewReasonType\r\n    WHEN NOT MATCHED BY TARGET\r\n    THEN INSERT ([Name], ReasonType) VALUES ([NewName], NewReasonType)\r\n    OUTPUT $action INTO @SummaryOfChanges;\r\n    \r\n    SELECT ProductID, OrderQty, SUM(LineTotal) AS Total\r\n    FROM Sales.SalesOrderDetail\r\n    WHERE UnitPrice < $5.00\r\n    GROUP BY ProductID, OrderQty\r\n    ORDER BY ProductID, OrderQty\r\n    OPTION (HASH GROUP, FAST 10);    \r\n`,\r\n}\r\n\r\nexport default function DataSearch() {\r\n    const { t, i18n } = useTranslation();\r\n    const initId = createId()\r\n    const initCurrentEditorData: IEditorItem = {\r\n        tabId: initId,\r\n        title: `${t('新查询')} 1`,\r\n        status: 'init',\r\n        smartShow: false,\r\n        smartContent: '',\r\n        smartCache: '',\r\n        smartTimer: undefined,\r\n        loading: false,\r\n        taskMap: {}\r\n    }\r\n    const initEditorData: Record<string, IEditorItem> = JSON.parse(localStorage.getItem('dataSearch2') || JSON.stringify({\r\n        [initCurrentEditorData.tabId]: initCurrentEditorData\r\n    }))\r\n    const initEditorDataList = Object.entries(initEditorData).reduce((pre: IEditorItem[], [key, value]) => ([...pre, { ...value }]), [])\r\n\r\n    const [activeKey, _setActiveKey] = useState<string>(initEditorDataList[0].tabId)\r\n    const activeKeyRef = useRef(activeKey);\r\n    const setActiveKey = (data: string): void => {\r\n        activeKeyRef.current = data;\r\n        _setActiveKey(data);\r\n    };\r\n\r\n    const [editorStore, _seteditorStore] = useState<IEditorStore>(initEditorData)\r\n    const editorStoreRef = useRef(editorStore);\r\n    const seteditorStore = (data: IEditorStore): void => {\r\n        editorStoreRef.current = data;\r\n        _seteditorStore(data);\r\n    };\r\n\r\n    const [configOption, _setConfigOption] = useState<IConfigFormDataOptionItem[]>([])\r\n    const configOptionRef = useRef(configOption);\r\n    const setConfigOption = (data: IConfigFormDataOptionItem[]): void => {\r\n        configOptionRef.current = data;\r\n        _setConfigOption(data);\r\n    };\r\n\r\n    const initialPanes = Object.entries(editorStore).reduce((pre: IEditorItem[], [key, value]) => ([...pre, { ...value }]), [])\r\n    const [panes, setPanes] = useState(initialPanes);\r\n    const newTabIndex = useRef(initEditorDataList.length);\r\n\r\n    const [columnConfig, setColumnConfig] = useState<any[]>([])\r\n    const [dataList, setDataList] = useState<any[]>([])\r\n\r\n    const configDataComponentRefs: any = useRef(null);\r\n\r\n    const setEditorState = (currentState: IEditorItemParams, key?: string) => {\r\n\r\n        const targetRes: IEditorStore = {\r\n            ...editorStoreRef.current\r\n        }\r\n        let currentTaskMap = {}\r\n\r\n        if (currentState.taskMap) {\r\n            currentTaskMap = {\r\n                taskMap: {\r\n                    ...editorStoreRef.current[activeKey].taskMap,\r\n                    ...currentState.taskMap\r\n                }\r\n            }\r\n        }\r\n\r\n        targetRes[key || activeKey] = {\r\n            ...targetRes[key || activeKey],\r\n            ...currentState,\r\n            ...currentTaskMap\r\n        }\r\n\r\n        localStorage.setItem('dataSearch2', JSON.stringify(targetRes))\r\n        editorStoreRef.current = targetRes\r\n        seteditorStore(targetRes)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getIdexFormConfig().then(res => {\r\n            const option = res.data.result\r\n            setConfigOption(option)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const targetDom = document.getElementById(\"buttonDrag\")\r\n        if (targetDom) {\r\n            drag(targetDom);\r\n        }\r\n\r\n        function drag(obj: any) {\r\n            obj.onmousedown = function (e: any) {\r\n                var dir = \"\";  //设置好方向\r\n                var firstX = e.clientX;  //获取第一次点击的横坐标\r\n                var firstY = e.clientY;   //获取第一次点击的纵坐标\r\n                var width = obj.offsetWidth;  //获取到元素的宽度\r\n                var height = obj.offsetHeight;  //获取到元素的高度\r\n                var Left = obj.offsetLeft;   //获取到距离左边的距离\r\n                var Top = obj.offsetTop;   //获取到距离上边的距离\r\n                //下一步判断方向距离左边的距离+元素的宽度减去自己设定的宽度，只要点击的时候大于在这个区间，他就算右边\r\n                if (firstX > Left + width - 30) {\r\n                    dir = \"right\";\r\n                } else if (firstX < Left + 30) {\r\n                    dir = \"left\";\r\n                }\r\n                if (firstY > Top + height - 30) {\r\n                    dir = \"down\";\r\n                } else if (firstY < Top + 30) {\r\n                    dir = \"top\";\r\n                }\r\n                //判断方向结束\r\n                document.onmousemove = function (e) {\r\n                    switch (dir) {\r\n                        case \"right\":\r\n                            obj.style[\"width\"] = width + (e.clientX - firstX) + \"px\";\r\n                            break;\r\n                        case \"left\":\r\n                            obj.style[\"width\"] = width - (e.clientX - firstX) + \"px\";\r\n                            obj.style[\"left\"] = Left + (e.clientX - firstX) + \"px\";\r\n                            break;\r\n                        case \"top\":\r\n                            obj.style[\"height\"] = height - (e.clientY - firstY) + \"px\";\r\n                            obj.style[\"top\"] = Top + (e.clientY - firstY) + \"px\";\r\n                            break;\r\n                        case \"down\":\r\n                            obj.style[\"height\"] = height + (e.clientY - firstY) + \"px\";\r\n                            break;\r\n                    }\r\n                }\r\n                obj.onmouseup = function () {\r\n                    document.onmousemove = null;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    const clearEditorTaskTimerByKey = (activeKey: string) => {\r\n        const tagList = Object.entries(editorStoreRef.current[activeKey]).reduce((pre: IEditorItem[], [key, value]) => ([...pre, { ...value }]), [])\r\n        tagList.forEach(tag => {\r\n            clearInterval(tag.smartTimer)\r\n        })\r\n        const currentTaskList = Object.entries(editorStoreRef.current[activeKey].taskMap).reduce((pre: IEditorTaskItem[], [key, value]) => ([...pre, { ...value }]), [])\r\n        currentTaskList.forEach(task => {\r\n            clearInterval(task.timer)\r\n        })\r\n    }\r\n\r\n    const clearTaskTimer = (activeKey: string, taskId: string) => {\r\n        const taskMap = editorStoreRef.current[activeKey].taskMap\r\n        const task = taskMap[taskId]\r\n        if (task) {\r\n            clearInterval(task.timer)\r\n        }\r\n    }\r\n\r\n    // 清空定时器\r\n    useEffect(() => {\r\n        setEditorState({\r\n            loading: false\r\n        })\r\n\r\n        return () => {\r\n            Object.entries(editorStore).forEach((item) => {\r\n                const [key] = item\r\n                clearEditorTaskTimerByKey(key)\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // 当前tab状态是runing，触发轮询\r\n        const currentEditorStore = editorStore[activeKey]\r\n        const currentTaskList = Object.entries(currentEditorStore.taskMap).reduce((pre: IEditorTaskItem[], [key, value]) => ([...pre, { ...value }]), [])\r\n        currentTaskList.forEach(task => {\r\n            if (task.status === 'running') {\r\n                pollGetRes(task.reqId)\r\n            }\r\n        })\r\n    }, [activeKey])\r\n\r\n\r\n    const onChange = (newActiveKey: string) => {\r\n        Object.entries(editorStore).forEach((item) => {\r\n            const [key] = item\r\n            if (key !== newActiveKey) {\r\n                clearEditorTaskTimerByKey(key)\r\n            }\r\n        })\r\n        setColumnConfig([])\r\n        setDataList([])\r\n        setActiveKey(newActiveKey);\r\n    };\r\n\r\n    const add = () => {\r\n        clearEditorTaskTimerByKey(activeKey)\r\n\r\n        const currentIndex = ++newTabIndex.current\r\n        if (currentIndex > 10) {\r\n            message.warn(t('标签数目达到限制'))\r\n        } else {\r\n            const newActiveKey = createId();\r\n            const title = `${t('新查询')} ${currentIndex}`\r\n            const newPanes = [...panes];\r\n            const initState: IEditorItem = {\r\n                title,\r\n                tabId: newActiveKey,\r\n                status: 'init',\r\n                smartShow: false,\r\n                smartContent: '',\r\n                smartTimer: undefined,\r\n                smartCache: '',\r\n                loading: false,\r\n                taskMap: {}\r\n            }\r\n            newPanes.push(initState);\r\n            setPanes(newPanes);\r\n            setActiveKey(newActiveKey);\r\n\r\n            let res: IEditorStore = {\r\n                ...editorStore, [newActiveKey]: initState\r\n            }\r\n\r\n            seteditorStore(res)\r\n            localStorage.setItem('dataSearch2', JSON.stringify(res))\r\n        }\r\n    };\r\n\r\n    const remove = (targetKey: string) => {\r\n        let newActiveKey = activeKey;\r\n        let lastIndex = -1;\r\n        panes.forEach((pane, i) => {\r\n            if (pane.tabId === targetKey) {\r\n                lastIndex = i - 1;\r\n            }\r\n        });\r\n        const newPanes = panes.filter(pane => pane.tabId !== targetKey);\r\n        if (newPanes.length && newActiveKey === targetKey) {\r\n            if (lastIndex >= 0) {\r\n                newActiveKey = newPanes[lastIndex].tabId;\r\n            } else {\r\n                newActiveKey = newPanes[0].tabId;\r\n            }\r\n        }\r\n        setPanes(newPanes);\r\n        setActiveKey(newActiveKey);\r\n\r\n        let res = { ...editorStore }\r\n        delete res[targetKey]\r\n        seteditorStore(res)\r\n        localStorage.setItem('dataSearch2', JSON.stringify(res))\r\n    };\r\n\r\n    const onEdit = (targetKey: any, action: 'add' | 'remove') => {\r\n        if (action === 'add') {\r\n            add();\r\n        } else {\r\n            remove(targetKey);\r\n        }\r\n    };\r\n\r\n    const fetchData = (task_id: string) => {\r\n        actionGetDataSearchRes(task_id).then(res => {\r\n            const { state, result, err_msg, result_url, spark_log_url, stage } = res.data\r\n            const task: IEditorTaskItem = {\r\n                ...editorStoreRef.current[activeKey].taskMap[task_id],\r\n                status: state,\r\n                step: stage,\r\n                log: spark_log_url,\r\n                downloadUrl: result_url,\r\n                result,\r\n                message: err_msg\r\n            }\r\n            if (state === 'success' || state === 'failure') {\r\n                const starTime = new Date(task.startTime || '').valueOf()\r\n                const nowTime = new Date().valueOf()\r\n                const duration = data2Time((nowTime - starTime) / 1000)\r\n                task.duration = duration\r\n\r\n                setEditorState({\r\n                    status: 'success',\r\n                    taskMap: {\r\n                        [task_id]: task\r\n                    }\r\n                })\r\n                clearTaskTimer(activeKey, task_id)\r\n            } else {\r\n                setEditorState({\r\n                    status: 'success',\r\n                    taskMap: {\r\n                        [task_id]: task\r\n                    }\r\n                })\r\n            }\r\n        }).catch(() => {\r\n            clearTaskTimer(activeKey, task_id)\r\n            message.error(t('查询结果失败，尝试重新运行'))\r\n            setEditorState({\r\n                status: 'failure',\r\n                taskMap: {\r\n                    [task_id]: {\r\n                        ...editorStoreRef.current[activeKey].taskMap[task_id],\r\n                        status: 'failure',\r\n                        step: 'end',\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const pollGetRes = (task_id: string) => {\r\n        clearTaskTimer(activeKey, task_id)\r\n\r\n        let timer = setInterval(() => {\r\n            fetchData(task_id)\r\n        }, 5000)\r\n\r\n        setEditorState({\r\n            taskMap: {\r\n                [task_id]: {\r\n                    reqId: task_id,\r\n                    status: 'init',\r\n                    content: editorStore[activeKey].content,\r\n                    name: `${t('任务')}${task_id}`,\r\n                    step: 'start',\r\n                    startTime: moment().format('YYYY-MM-DD HH:mm:ss'),\r\n                    database: editorStore[activeKey].database,\r\n                    table: editorStore[activeKey].table,\r\n                    timer,\r\n                    message: ''\r\n                }\r\n            }\r\n        })\r\n        fetchData(task_id)\r\n    }\r\n\r\n    const runTask = () => {\r\n        setEditorState({ status: 'running' })\r\n        const customParams = configOption.map(item => item.id).reduce((pre: any, next: any) => ({ ...pre, [next]: editorStore[activeKey][next] }), {})\r\n        // 运行子任务\r\n        actionRun({\r\n            sql: editorStore[activeKey]?.content || '',\r\n            ...customParams\r\n        }).then(res => {\r\n            const { err_msg, task_id } = res.data\r\n            if (err_msg) {\r\n                setEditorState({\r\n                    status: 'failure',\r\n                })\r\n                Modal.error({\r\n                    title: t('运行失败'),\r\n                    icon: <ExclamationCircleOutlined />,\r\n                    width: 1000,\r\n                    content: err_msg,\r\n                    okText: t('关闭'),\r\n                    // maskClosable: true\r\n                });\r\n            } else if (task_id) {\r\n                pollGetRes(task_id)\r\n            }\r\n        }).catch(err => {\r\n            setEditorState({ status: 'failure' })\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"datasearch-container fade-in d-f\">\r\n            <div className=\"flex1 ptb16 pl16\">\r\n                <Tabs type=\"editable-card\" onChange={onChange} activeKey={activeKey} onEdit={onEdit}>\r\n                    {panes.map((pane, index) => (\r\n                        <Tabs.TabPane tab={`${t('新查询')} ${index + 1}`} key={pane.tabId} closable={index !== 0}>\r\n                            <div className=\"d-f fd-c h100\">\r\n                                <div className=\"flex2 s0 ov-a\">\r\n                                    {\r\n                                        editorStore[activeKey]?.loading ? <div className=\"codeedit-mark\">\r\n                                            <div className=\"d-f jc ac fd-c\">\r\n                                                <LoadingStar />\r\n                                                <div>\r\n                                                    {t('结果生成中')}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div> : null\r\n                                    }\r\n\r\n                                    <CodeEdit\r\n                                        value={editorStore[activeKey]?.content}\r\n                                        onChange={(value: any) => {\r\n                                            setEditorState({\r\n                                                content: value === '' ? undefined : value,\r\n                                                title: pane.title,\r\n                                            })\r\n                                        }} />\r\n                                </div>\r\n\r\n                                <div className=\"ov-h\" id=\"showBox\" style={{ height: 500 }}>\r\n                                    <Draggable\r\n                                        axis=\"y\"\r\n                                        onStart={() => { }}\r\n                                        onDrag={(e: any) => {\r\n                                            const showBoxDom = document.getElementById('showBox')\r\n                                            if (showBoxDom) {\r\n                                                const res = document.body.clientHeight - e.y\r\n                                                showBoxDom.style.height = `${res}px`\r\n                                            }\r\n                                        }}\r\n                                        onStop={() => { }}>\r\n                                        <div className=\"ta-c\" style={{ cursor: 'ns-resize' }}><MenuOutlined /></div>\r\n                                    </Draggable>\r\n                                    <div className=\"ptb8 plr16 bor-l bor-r b-side d-f ac jc-b bg-w\">\r\n                                        <div className=\"d-f ac\">\r\n                                            <Switch className=\"mr8\"\r\n                                                checked={editorStore[activeKey].smartShow}\r\n                                                unCheckedChildren={t('正常模式')}\r\n                                                checkedChildren={t('智能模式')} onChange={(checked) => {\r\n                                                    setEditorState({ smartShow: checked })\r\n                                                }} />\r\n                                            {\r\n                                                editorStore[activeKey].smartShow ? <InputSearch\r\n                                                    value={editorStore[activeKey].smartContent}\r\n                                                    isOpenSearchMatch\r\n                                                    onChange={(value: any) => {\r\n                                                        setEditorState({\r\n                                                            smartContent: value,\r\n                                                        })\r\n                                                    }}\r\n                                                    onSearch={(value) => {\r\n                                                        setEditorState({\r\n                                                            smartCache: sqlMap[value],\r\n                                                            loading: true,\r\n                                                        })\r\n\r\n                                                        const timer = setInterval(() => {\r\n                                                            const currentContent = editorStoreRef.current[activeKey].content || ''\r\n                                                            if (editorStoreRef.current[activeKey].smartCache) {\r\n                                                                let smartCache = editorStoreRef.current[activeKey].smartCache || ''\r\n                                                                const tarStr = smartCache.substr(0, 20)\r\n                                                                smartCache = smartCache.replace(tarStr, '')\r\n\r\n                                                                setEditorState({\r\n                                                                    smartCache,\r\n                                                                    content: currentContent + tarStr\r\n                                                                })\r\n                                                            } else {\r\n                                                                clearInterval(editorStoreRef.current[activeKey].smartTimer)\r\n                                                                setEditorState({\r\n                                                                    smartCache: '',\r\n                                                                    smartTimer: undefined,\r\n                                                                    loading: false,\r\n                                                                })\r\n                                                            }\r\n                                                        }, 800)\r\n\r\n                                                        setEditorState({\r\n                                                            smartTimer: timer,\r\n                                                        })\r\n                                                    }}\r\n                                                    options={[\r\n                                                        'test',\r\n                                                    ]} placeholder={t('AI智能生成')} width={'240px'} /> : null\r\n                                            }\r\n                                        </div>\r\n                                        <div className=\"d-f ac\">\r\n                                            <ConfigFormData\r\n                                                ref={configDataComponentRefs}\r\n                                                dataValue={editorStore[activeKey]}\r\n                                                onChange={(dataValue) => {\r\n                                                    setEditorState(dataValue)\r\n                                                }}\r\n                                                onConfigChange={(option) => {\r\n                                                    setConfigOption(option)\r\n                                                    setEditorState({\r\n                                                        database: 'db'\r\n                                                    })\r\n                                                }}\r\n                                                option={configOptionRef.current} />\r\n                                            <Button className=\"ml16\" type=\"primary\" loading={editorStore[activeKey].status === 'running'} onClick={() => {\r\n                                                configDataComponentRefs.current.onSubmit().then((res: any) => {\r\n                                                    runTask()\r\n                                                })\r\n                                            }}>{t('运行')}<RightCircleOutlined /></Button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"flex1 bor b-side s0 bg-w p-r ov-a\" style={{ height: 'calc(100% - 80px)' }}>\r\n                                        <div className=\"pt8\">\r\n                                            <div className=\"tag-result bg-theme c-text-w mr16\">\r\n                                                {t('结果')}\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"plr16 pt8\">\r\n                                            <TaskList\r\n                                                option={editorStore[activeKey].taskMap}\r\n                                                onDelete={(id) => {\r\n                                                    Modal.confirm({\r\n                                                        title: t('删除'),\r\n                                                        icon: <ExclamationCircleOutlined />,\r\n                                                        content: `${t('确定删除')}?`,\r\n                                                        okText: t('确认删除'),\r\n                                                        cancelText: t('取消'),\r\n                                                        okButtonProps: { danger: true },\r\n                                                        onOk() {\r\n                                                            let taskMap = editorStore[activeKey].taskMap\r\n                                                            clearTaskTimer(activeKey, id)\r\n                                                            delete taskMap[id]\r\n                                                            setEditorState({\r\n                                                                taskMap\r\n                                                            })\r\n                                                        },\r\n                                                        onCancel() { },\r\n                                                    });\r\n                                                }}\r\n                                                onRetry={(id) => {\r\n                                                    pollGetRes(id)\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </Tabs.TabPane>\r\n                    ))}\r\n                </Tabs>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"names":["InputSearch","props","inputRef","id","Math","random","toString","substring","useState","options","dataCache","setDataCache","value","setValue","useEffect","dataFilter","isOpenSearchMatch","filter","item","indexOf","handleChange","onChange","highlightKeyWord","keyWord","index","preStr","nextStr","length","className","debounceScroll","fun","timer","time","args","clearTimeout","setTimeout","apply","debounce","onScrollButtom","labelName","htmlFor","style","width","disabled","placeholder","maxLength","e","target","onKeyPress","nativeEvent","keyCode","blur","onSearch","currentTarget","ref","element","SearchOutlined","onScroll","stopPropagation","scrollTop","clientHeight","scrollHeight","maxHeight","loading","right","top","map","onMouseDown","onClick","handleClick","CopyToClipboard","require","ResizableTitle","onResize","restProps","Resizable","height","handle","draggableOpts","enableUserSelectHack","userSelect","exportDataVisible","setExportDataVisible","header","data","dataFormat","setDataFormat","filterValue","setFilterValue","columns","cols","setCols","handleResize","_","size","temp","tableWidth","reduce","pre","next","localStorage","setItem","tableKey","JSON","stringify","setCurrentTableScroll","currentTableScroll","x","customColumns","col","onHeaderCell","column","scroll","useTranslation","t","i18n","dataSource","dataIndex","handdleFilterHeader","dataColumns","sheetHeader","title","tarData","forEach","dataRow","row","colName","res","push","handleExportJira","str","join","rowKey","Object","values","handleExportText","direction","maskClosable","centered","bodyStyle","overflow","visible","onCancel","footer","position","label","defaultValue","bottom","type","tab","text","onCopy","message","cursor","minHeight","titleNode","buttonNode","cancelExportData","justify","align","marginLeft","renderEmpty","flexDirection","src","emptyImg","alt","components","cell","pagination","rowSelection","actionRun","params","axios","actionGetDataSearchRes","task_id","getIdexTaskDownloadUrl","separator","getIdexTaskResult","stopIndxTask","getIdexFormConfig","CodeEdit","theme","bbedit","extensions","sql","zebraStripes","step","lightColor","darkColor","stepMap","statusIconMap","status","LoadingOutlined","CloseCircleOutlined","color","QuestionCircleOutlined","TaskList","visibleDownload","setVisibleDownload","setVisibleResult","setLoadingResult","_setSeparator","separatorRef","useRef","setSeparator","current","currentReqId","_setCurrentReqId","currentReqIdRef","handleResultData","result","targetData","slice","config","key","destroyOnClose","then","window","open","download_url","catch","err","console","log","defaultActiveKey","entries","option","reverse","reqId","extra","onDelete","DeleteOutlined","onRetry","RedoOutlined","Step","icon","TableBox","record","render","placement","Modal","okText","content","span","startTime","duration","onOk","StopOutlined","cancelText","Promise","resolve","reject","handleData","finally","database","table","startime","ConfigFormData","React","Form","form","useImperativeHandle","onSubmit","validateFields","setData","setFieldsValue","dataValue","dispatchRenderFormItem","itemProps","name","rules","required","initialValue","marginBottom","marginRight","mode","multiple","undefined","showSearch","disable","optionFilterProp","placeHolder","rowOption","relate","relateId","relateOption","currentOption","i","onConfigChange","getFieldsValue","renderSelect","inputSelectOption","renderInputSelect","component","createId","cookies","sqlMap","DataSearch","initCurrentEditorData","tabId","smartShow","smartContent","smartCache","smartTimer","taskMap","initEditorData","parse","getItem","initEditorDataList","activeKey","_setActiveKey","activeKeyRef","setActiveKey","editorStore","_seteditorStore","editorStoreRef","seteditorStore","configOption","_setConfigOption","configOptionRef","setConfigOption","initialPanes","panes","setPanes","newTabIndex","setColumnConfig","setDataList","configDataComponentRefs","setEditorState","currentState","targetRes","currentTaskMap","obj","targetDom","document","getElementById","onmousedown","dir","firstX","clientX","firstY","clientY","offsetWidth","offsetHeight","Left","offsetLeft","Top","offsetTop","onmousemove","onmouseup","clearEditorTaskTimerByKey","tag","clearInterval","task","clearTaskTimer","taskId","currentEditorStore","pollGetRes","fetchData","state","err_msg","result_url","spark_log_url","stage","downloadUrl","starTime","Date","valueOf","nowTime","data2Time","setInterval","moment","format","newActiveKey","onEdit","targetKey","action","currentIndex","newPanes","initState","add","lastIndex","pane","remove","closable","LoadingStar","axis","onStart","onDrag","showBoxDom","body","y","onStop","MenuOutlined","checked","unCheckedChildren","checkedChildren","currentContent","tarStr","substr","replace","customParams","ExclamationCircleOutlined","runTask","RightCircleOutlined","okButtonProps","danger"],"sourceRoot":""}