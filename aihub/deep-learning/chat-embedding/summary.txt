"docs/目录.md": "这篇文章主要内容是关于一个项目的架构、部署、使用和运维等方面的介绍。文章中包含了项目的架构介绍、基础组件介绍、平台架构、平台部署、平台使用简介、运维以及二次开发等内容。文章提供了详细的链接，可以进一步了解每个部分的具体内容。",
"docs/运维/自定义配置文件.md": "这篇文章主要介绍了配置文件的位置和使用方式。文章提到了三个配置文件的位置，分别是本地开发配置文件、线上部署配置文件和部署为线上配置文件。此外，文章还提到了其他配置文件的位置，包括本地调试时和线上部署时的配置文件。文章通过列举了各个配置文件的路径，帮助读者了解如何找到和使用这些配置文件。",
"docs/运维/管理员操作指南.md": "文章主要内容包括机器标签管理、权限管理、认证方式、项目组和模板分类、在线开发、训练仓库、任务模板、任务流和demo任务流等方面的内容。其中，机器标签管理通过label对机器进行管理，根据不同的需求选择不同的机器；权限管理采用rbac的方式进行权限控制；认证方式支持多种方式，包括MySQL账号密码验证和LDAP认证；项目组和模板分类可以实现跨k8s集群调度的支持；在线开发中的notebook具有定时清理和续期提醒功能；训练仓库中的k8s hubsecret和账号密码会更新到所有集群中；任务模板中可以配置工作目录、挂载目录、环境变量等；任务流中包含调试、运行、日志等功能；demo任务流可以展示所有的demo pipeline；定时调度记录中手动运行和定时运行不干扰。",
"docs/使用/内部服务.md": "这篇文章主要介绍了三种不同的web服务，分别是mysql、mongo和redis。对于每种服务，文章提供了相应的镜像和环境变量配置。对于mysql和mongo服务，还提供了端口信息。对于redis服务，文章还提供了一个准备文件和启动命令，并给出了相应的端口信息。",
"docs/使用/triton-推理服务.md": "这篇文章主要介绍了使用TensorRT进行模型推理加速的方法。文章首先介绍了镜像的使用，然后详细介绍了模型的目录结构和配置文件的设置。接着介绍了启动命令和获取自动生成配置的方法。文章还提供了使用Triton提供的客户端包进行API访问的建议，并列出了标准化模型接口的示例。最后，文章介绍了使用TensorRT进行ONNX模型推理加速和使用PyTorch进行模型加速的方法，并提供了相应的代码示例和模型配置的说明。",
"docs/使用/tfserving-推理服务.md": "这篇文章主要介绍了如何保存和部署TensorFlow模型以及如何使用tfserving API进行模型访问。文章首先介绍了保存模型时需要手动指定签名的方法，然后介绍了如何查看保存的模型结构。接下来，文章详细介绍了使用tfserving进行云原生服务部署的步骤，包括镜像选择、模型文件目录结构、模型配置文件、监控配置文件和平台配置文件的编写。最后，文章介绍了如何使用tfserving API进行模型访问，包括获取模型状态、获取模型元数据、分类和回归API以及预测API的使用方法。文章还提供了一些示例代码供读者参考。",
"docs/使用/推理服务.md": "这篇文章主要介绍了域名访问和ip:port访问的方式，以及它们与版本/域名/pod/ip的关系。文章还提到了系统自带域名和自定义域名的使用方法，以及流量复制和分流、灰度升级和弹性伸缩容的实现方式。此外，文章还列举了一些系统携带的环境变量。",
"docs/使用/构建镜像.md": "这篇文章主要介绍了在线构建镜像的功能，以及针对用户不熟悉docker技术和基础镜像选择困难的问题提供的解决方案。文章还提供了修改默认python版本和ubuntu容器基础工具的封装的示例代码。最后，文章列举了常用的GPU基础镜像。",
"docs/使用/notebook中链接Hadoop生态.md": "本文介绍了在基于Docker镜像的环境中安装和配置Hadoop生态系统的步骤。首先，提供了基于已有镜像手动安装Hadoop生态的方法，包括启动基础容器、安装配置Spark和Flink等。其次，介绍了基于Dockerfile实现的方法，包括编辑Dockerfile、构建镜像和启动Hadoop容器等。最后，提供了其他辅助文档，包括Centos下安装Python3.8、安装Hadoop和安装Hive的步骤。",
"docs/使用/notebook-在线开发.md": "这篇文章主要介绍了在线开发的重要性以及cube提供的在线IDE功能。cube提供了vscode和jupyter两种在线IDE，用户可以方便地进行代码和数据的调试。在vscode中，用户可以上传下载文件/文件夹，使用命令行终端，并且封装了用户的基本环境需求。在jupyter中，用户可以使用一些实用的插件，如tensorboard。cube还解决了notebook的资源占用和环境重置问题，并支持多实例的virtualservice代理。用户还可以保存notebook的镜像到仓库中。",
"docs/使用/新人用户使用指南.md": "这篇文章主要介绍了一个在线开发平台的使用教程，包括容器、镜像、任务模板、任务流、notebook开发、在线构建镜像、配置/调试/定时运行pipeline、nni超参搜索、内部服务和推理服务等内容。文章详细介绍了每个功能的使用方法和注意事项。",
"docs/使用/torch-server-推理服务.md": "这篇文章主要介绍了使用PyTorch进行模型导出、打包、配置和部署的步骤。文章首先介绍了支持的PyTorch版本和镜像的相关信息。然后详细说明了如何导出完整的模型，包括模型结构和参数。接下来介绍了如何使用torch-model-archiver进行模型打包，并提供了模型配置文件和日志配置文件的编写方法。最后介绍了如何启动和访问部署的服务，包括推理、健康检查、管理和监控等接口的使用方法。文章还提供了自定义handler的示例代码和使用方法。",
"docs/使用/超参搜索.md": "文章主要介绍了nni超参搜索的功能和使用方法。nni的超参搜索支持多种算法，并且在pipeline中也支持边训练边超参搜索的模板。用户只需要将超参数作为输入接受，并上报作为超参算法的目标值即可。文章还介绍了超参空间的定义方式，并列出了不同超参算法支持的超参空间类型。此外，文章还介绍了代码要求，包括参数接收和结果上报的方法。最后，文章还展示了通过web界面发起一个搜索实验，并查看搜索效果的方法。",
"docs/架构/平台架构-推理服务.md": "文章主要内容是关于推理服务各阶段的介绍，包括服务网格阶段、serverless阶段、pipeline阶段、http/grpc框架和模型计算。文章还介绍了网关入口适配、分流+流量复制、prometheus服务发现、基于qps/gpu利用率进行hpa、各类推理框架、模型压缩、gpu推理加速、vgpu、Transformer、推理服务pipeline、分割推理和实时训练服务等内容。",
"docs/架构/算力与分布式存储.md": "这篇文章主要讨论了两个问题：算力统筹/均衡和平台分布式存储挂载。在算力统筹/均衡方面，文章提出了解决时间空间gpu资源利用率不足、异构算力环境、超大数据量等问题的方案。在平台分布式存储挂载方面，文章介绍了如何减少数据导入导出链路，实现数据文件在不同系统中间的共享。此外，文章还提到了挂载的配置和分布式文件系统的使用。",
"docs/架构/prometheus-grafana监控体系.md": "该文章主要介绍了Prometheus的架构和使用方法。文章首先介绍了Prometheus的架构，包括pushgateway、exporter、Prometheus Server、alertmanager和grafana等组件的功能和作用。然后介绍了Prometheus Operator的架构和使用方法。接着详细介绍了如何监控机器使用情况、容器使用情况和入口流量时延等信息，并提供了相应的监控指标和配置方法。最后介绍了如何监控三方中间件和自定义业务数据，并配置报警和可视化报表。",
"docs/架构/平台架构-云原生依赖.md": "这篇文章主要介绍了在使用Rancher和Kubernetes时的一些优势和配置方法。文章首先介绍了Kubernetes的优势，包括环境隔离、集群化自动化管理、计算资源自动调度和成熟的生态体系。接着介绍了Kubernetes中的自定义资源CustomResourceDefinition（CRD），并列举了一些常用的CRD类型。然后介绍了Kubernetes的调度机制，包括节点选择、亲密度、污点和过滤打分等环节。最后介绍了在内网部署时如何配置内网域名的使用和DNS解析服务器。",
"docs/架构/项目简介.md": "这篇文章介绍了Cube一站式的机器学习平台，该平台解决了传统算法落地流程中的一些问题，使算法工程师能够更加专注于算法模型的构建。文章详细介绍了Cube Studio的功能和平台部署过程，并列举了平台支持的各种模板和功能，包括整体架构、多集群管控、分布式存储、在线开发、拖拉拽pipeline编排、功能模板化、nni超参搜索、分布式框架、推理服务、实时训练和边缘计算等。",
"docs/架构/基础组件介绍.md": "这篇文章主要介绍了一个平台的基础架构和组件说明。平台的基础架构包括机器的标准化、分布式存储、k8s集群、监控体系等。而组件说明则列举了各个命名空间下的组件及其功能，包括平台的web前端和后端、调度任务、监控任务、存储和缓存、k8s中的管理界面和插件、分布式计算、分布式调度、对象存储、入口网关、监控数据存储和可视化、在线构建镜像和notebook、用户创建的内部服务和推理服务、以及用户创建的pipeline任务。",
"docs/架构/平台架构-docker.md": "这篇文章主要介绍了Docker的基础概念、容器和镜像的概念，以及如何安装和配置Docker。文章还介绍了Docker的命令实践，包括镜像、容器、网络和存储的操作。此外，文章还介绍了如何编写Dockerfile文件，包括存储层、小镜像、多镜像和多架构的使用。文章还提到了仓库hardor和常用镜像部署mysql的方法，以及使用nvidia-docker来使用GPU的基础镜像。最后，文章还提到了docker-compose和docker-swarm的使用。",
"docs/架构/平台架构-ML任务流.md": "这篇文章主要介绍了cube平台的拖拉拽的pipeline编排功能，以及其中的模板变量、单个task调试、分布式任务、断点重训/重试/超时、pod运行、定时调度和开放式插件等功能。通过拖拉拽的方式，用户可以方便地编排任务流，并且支持各种分布式框架。同时，还提供了模板变量、单个task调试、断点重训/重试/超时等功能，方便用户进行调试和优化。此外，还支持pod运行情况的监控和定时调度功能，并且开放了插件注册功能，用户可以自定义模板并分享给其他用户使用。",
"docs/架构/平台架构-分布式训练能力-加速.md": "这篇文章主要讨论了分布式集群的概念和实现方法。首先介绍了不同的分布式集群，如tf分布式训练集群、pytorch分布式训练集群等，并提到了分布式数据处理和训练的相关技术和算法。然后讨论了在云原生环境中实现分布式数据处理/训练的方法，包括配置分布式训练集群的部署、控制器部署分布式训练集群、代码识别分布式角色和训练框架支持分布式等。接着介绍了选对分布式框架的重要性，并列举了不同的分布式框架及其特点。文章还讨论了分布式worker的均衡度问题，以及kube scheduler的打分策略。最后，文章提到了分布式任务中单worker性能加速、gpu利用率提高、任务资源配置动态调整和资源池动态均衡等问题。",
"docs/部署/边缘集群方式部署平台.md": "这篇文章主要介绍了边缘集群的适用场景和主要原则。适用场景包括避免数据传输带宽、中心节点算力成本和边缘节点运维成本。主要原则包括边缘网络用户可以访问边缘网络和中心网络，但中心网络用户无法访问边缘网络；在中心网络和边缘网络之间无法通过k8s服务名进行代理；中心网络部署控制器部分，边缘网络部署用户容器，并需要将minio的host改为中心网络的ip。",
"docs/部署/alluxio分布式存储部署.md": "这篇文章主要介绍了在Kubernetes上部署分布式存储alluxio+minio的方法和步骤。文章首先介绍了部署所需的先决条件，包括Kubernetes集群和Alluxio Docker镜像。然后，文章介绍了在Kubernetes上安装Alluxio的两种方法：使用helm图表或使用kubectl。接下来，文章详细介绍了Alluxio的定义、优势和技术创新。最后，文章给出了部署过程的具体命令，并提到了一些注意事项。",
"docs/部署/平台单机部署.md": "这篇文章主要是关于部署基础环境依赖的说明。文章列举了所需的软件和硬件要求，并提供了部署命令和排查步骤。此外，还提供了一些相关的视频和链接供读者参考。",
"docs/部署/rancher部署k8s.md": "这篇文章主要介绍了如何在内网使用rancher自建k8s集群。文章首先介绍了建设前的准备工作，包括申请内网docker仓库和拉取基础组件镜像。然后详细介绍了如何初始化节点、部署rancher server和部署k8s集群的步骤。文章还提到了rancher server的高可用配置、多用户管理、客户端kubectl和kubernetes-dashboard的使用，以及节点清理和rancher server节点迁移的方法。总的来说，文章详细介绍了在内网环境下使用rancher自建k8s集群的步骤和注意事项。",
"docs/部署/gpu机器加入集群.md": "这篇文章主要介绍了在GPU机器环境中准备工作和Kubernetes集群中使用GPU的步骤。首先需要安装GPU驱动并让Docker能够识别和应用GPU驱动。根据Docker版本和使用场景的不同，可以选择安装nvidia-container-runtime或nvidia-container-toolkit。如果需要在Kubernetes中使用GPU，则需要安装nvidia docker2，并修改Docker默认runtime。然后将机器加入Kubernetes集群，并为机器添加标签以管理和选择设备。接下来部署Kubernetes GPU插件和监控组件，以便调度和监控GPU资源的使用情况。最后可以根据GPU利用率进行弹性伸缩。",
"docs/部署/efk-ki日志方案.md": "这篇文章主要介绍了一个日志采集和存储的整体方案。方案中使用了ES作为存储日志索引元数据的工具，并提供了Kibana和平台API进行查询。使用Filebeat采集训练、推理和平台日志，并存储到ES中。使用Ilogtail采集容器控制台和容器内部日志，并发送到Kafka集群的不同topic中。Kafka根据不同的topic存储需要分析的业务日志，并接受Prometheus-Kafka-Adapter存放指标数据。文章还介绍了不同类型日志的采集方式和存储规范。最后，文章给出了部署过程的步骤。",
"docs/部署/kubesphere部署cube-studio详细版.md": "这篇文章主要介绍了在部署Kubernetes集群之前需要进行的环境初始化工作。包括检查操作系统版本、主机名解析、时间同步、禁用iptables和firewalld服务、禁用selinux、禁用swap分区、修改Linux的内核参数、配置ipvs功能等。文章还介绍了使用KubeKey创建集群的步骤，并提供了部署CubeStudio和优化系统的一些指导。",
"docs/部署/替换组件.md": "这篇文章主要介绍了如何使用自有的组件来避免重复部署。首先，文章提到了使用自有的istio，可以在start.sh文件中禁用istio的部署，并注意一些配置事项。其次，文章介绍了使用自有的prometheus，包括注释掉部分内容、修改grafana的配置以及部署istio virtual来代理grafana服务。文章还提到了一些注意事项和配置修改的方法。总的来说，这篇文章主要是介绍了如何使用自有的组件来避免重复部署，并提供了一些配置和注意事项。",
"docs/部署/harbor私有仓库.md": "这篇文章主要介绍了如何使用docker-compose部署Harbor，包括准备安装脚本和配置文件、修改主机名、登录密码和关闭https等步骤。文章还提到了可以安装公证服务notary和漏洞扫描器trivy。此外，还介绍了如何配置证书和使用Docker登录Harbor进行服务拉取。",
"docs/部署/kubesphere部署k8s.md": "这篇文章主要介绍了如何搭建KubeSphere。文章提到了搭建KubeSphere的最低机器规格要求、kubectl版本要求以及清理环境的步骤。然后，文章给出了下载KubeKey的命令和清理kubeconfig的命令。最后，文章介绍了安装1.20版本的k8s和KubeSphere的命令。文章最后提到了可以参考KubeSphere官方文档获取详细的安装步骤。",
"docs/部署/serverless集群方式部署cube-studio.md": "这篇文章主要介绍了serverless集群的适用场景和腾讯云TKE Serverless集群的特点。适用场景包括成本有限或时间/空间利用率不高的情况以及云sass服务。TKE Serverless集群是一种无需购买节点即可部署工作负载的服务模式，完全兼容原生Kubernetes，并按照容器真实使用的资源量计费。然而，该模式的坏处是任务不能共享占用资源，需要全部独占方式使用，并且需要将机器层面的操作改为serverless的操作，如切换为分布式存储、购买云厂商的镜像缓存和nat服务等。",
"docs/部署/多机、多集群、多项目组.md": "这篇文章主要介绍了机器标签管理、单集群多机、多集群、多项目组等内容。文章首先介绍了机器标签管理的原则，根据不同的需求选择不同的机器进行管理。接着介绍了单集群多机的实现原理，包括控制组件部署和集群扩容。然后介绍了分布式存储的配置和挂载方式。接下来介绍了多集群的实现原理，包括远程集群卸载web端、数据库连接和配置文件的更新。最后介绍了多项目组的划分和算力均衡的实现方式。",
"docs/开发/通用任务流模板.md": "这篇文章主要介绍了一个探索/搜索接口和详情接口的使用方法。探索/搜索接口可以通过发送post请求来搜索节点，并返回血缘图。详情接口可以通过发送get请求来获取节点的详细信息。文章还提到了各平台节点血缘和要展示的属性的需求，以及各平台血缘离线导入规范。",
"docs/开发/notebook-实现方法.md": "这篇文章主要讨论了镜像的构建和平台控制、代理以及init的共同实现。同时也提到了初始化用户环境的重要性。",
"docs/开发/登录-推送功能添加.md": "这篇文章主要介绍了登录、认证和推送功能在项目中的集成和实现方式。登录功能用于用户认证，支持4种认证方式，其中默认方式为数据库账号密码认证。认证功能暂未详细介绍。推送功能通过在项目中的push_admin函数和push_message函数实现，可以在定时调度和异步任务中调用。用户可以根据需要自行修改和实现这两个函数。",
"docs/开发/添加-嵌入页面.md": "这篇文章主要内容是关于菜单控制的操作。文章介绍了如何在文件myapp/views/home.py中增加一个接口，并提到了接口可以是外联、iframe或者model/view的api。同时，文章还提到了在myapp/models/目录下增加对应的model文件和在myapp/views/目录下增加对应的view文件的操作。最后，文章还提到了数据库升级调整的步骤，包括数据库升级、检查数据库与代码新增的数据库结构以及将数据库变更结构更新到数据库。",
"docs/开发/任务调试.md": "这篇文章主要介绍了一些与软件开发和运行相关的内容，包括调试、运行、日志聚合和监控。文章没有提供具体的细节和解释，只是简单列出了这些主题。",
"docs/开发/开发算法模板.md": "这篇文章主要介绍了关于job模板制作的规范和注册流程。在模板目录结构方面，需要按照规定的格式进行组织。关于构建方面，需要使用统一的构建脚本和Dockerfile文件定义镜像构建过程。在代码方面，只需最终形成docker即可，镜像的输入参数统一为字符串。建议镜像的tag使用日期。注册模板的入口在Cube Studio页面上，需要先注册仓库和镜像，再注册任务模板。模板的配置包括名称、描述、版本、目录和启动命令、挂载目录、启动参数编写实例、环境变量、k8s账号和扩展等。最后，还介绍了开源模板贡献的要求。",
"docs/开发/自定义notebook镜像.md": "这篇文章主要内容包括：关于notebook重启和环境问题的解决方法，构建notebook镜像的两种方法，修改配置文件的步骤，增加其他类型的notebook的说明，以及使用conda设置多版本python和安装gpu监控的步骤。",
"docs/开发/gpt-源码.md": "这篇文章主要讨论了GPT（生成对抗网络）在场景和对话方面的实现逻辑。GPT是一种能够生成自然语言文本的人工智能模型，可以用于模拟对话和创造虚拟场景。文章可能会探讨GPT的训练方法、数据集的选择以及模型的应用等方面的内容。",
"docs/开发/fab-python-后端开发框架.md": "这篇文章介绍了一个快速搭建前后端管理控制台的开源项目。该项目集成了oa登录、rbac权限控制、定时调度、缓存、公司平台sdk、前后端接口自动封装、用户行为记录、数据库升级管理、docker镜像、docker-compose调试、k8s部署等功能。文章详细介绍了项目的框架由来、环境准备、用户和权限管理、添加自己的页面和接口、公司组件api、定时调度能力、缓存、用户行为记录、数据库结构升级和回滚、docker镜像封装、本地调试和k8s高可用部署等内容。",
"docs/开发/aihub-源码.md": "这篇文章主要介绍了SDK的功能和实现方法。文章提到了SDK本身的特点，包括web界面的实现和后台的接口协议。然后，文章详细介绍了如何实现一键开发、一键部署、一键微调以及微调后的部署。最后，文章还提到了如何实现自动化标注。",
"docs/开发/aihub-开发算法应用.md": "这篇文章主要介绍了如何开发一个应用，其中包括推理函数、训练函数、数据集函数和标注函数。",
"docs/开发/API-接口.md": "这篇文章主要介绍了基本路由和web url与api url之间的对应关系，以及各种操作（add、edit、show、delete、list、action）的api url示例。文章还提供了不同模块的$view路径和表名的对应关系，以及curd请求参数和响应结果的示例。此外，文章还介绍了header的设置、list get接口参数传递方式、filter操作、分页和排序的设置，以及交互数据结构的示例。",
"docs/开发/模板化接口.md": "这篇文章主要内容是关于菜单信息接口和基本路由的介绍。文章中给出了菜单信息接口的示例代码，包括菜单的名称、标题、图标等信息。同时还介绍了基本路由的使用方法，包括add、edit、show、delete和list等操作的URL和请求方式。文章还提供了一些特殊传参的示例和交互数据结构示例。最后还给出了一个Python客户端示例，用于演示task/pipeline的add、edit、list和delete操作。",
"docs/开发/前后端本地启动调试.md": "这篇文章主要介绍了本地调试的步骤和方法。首先是部署MySQL数据库，并创建kubeflow数据库和授权用户。然后是构建镜像和拉取镜像的步骤。接下来是使用docker-compose部署myapp，并提供了不同阶段的命令，包括初始化数据库、构建前端和调试后端等。最后是介绍了可视化页面的打包和输出路径，并提供了解决构建镜像失败的方法。",
"docs/开发/定时调度.md": "这篇文章主要讨论了控制参数、时间变量和实现逻辑。文章没有具体说明这些内容的具体细节，只是简单列举了这些主题。",
"docs/开发/gpt-知识库的实现.md": "本文介绍了一个一键上传知识库的问答助手的设计要求和实现方案。该系统支持多种数据格式文档的接入，多种大模型引擎的支持，以及精准匹配和好用的特点。在实现方面，选择了使用llama_index框架来构建系统，该框架提供了索引、检索器和查询引擎等控制器来管理流程。llama_index支持多种通用的索引方式，包括VectorIndex、TableIndex和TreeIndex等，可以快速对各种数据发起问询。最后展示了初版系统的一些效果。",
"docs/开发/代码结构简介.md": "这篇文章主要介绍了一个开发框架的内容。文章首先介绍了平台控制端使用的fab框架，然后详细说明了菜单控制、登录方式和消息推送的实现方式。接着介绍了定时任务和异步任务的开发，以及监听crd变化的代码开发。然后讲解了数据库的更新迭代和数据库结构和视图的相关内容。最后提到了前端代码和权限管理的基础逻辑。",